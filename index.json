[{"categories":["go"],"content":"Go 对象池用法及优化-理论篇","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"Go 对象池用于临时对象重用，可以减少对象频繁创建造成的资源浪费，即减少GC开销及内存占用等，在一定程度上提升程序性能，降低服务成本。本文基于 go1.18.2 ，给出对象池使用场景、处理流程及注意事项、开源示例、个人实例(包括GRPC 下对象池的使用)及最佳实践。 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:0:0","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"场景 需要频繁创建同一类对象，且创建成本较高时 单个对象内存占用超过一定阈值，优势越明显 占用内存越大，优势越明显 并发量越大，优势越明显 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:1:0","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"处理流程及注意事项 创建的临时对象放回池中后需尽可能的满足：无状态，无引用 正常处理流: Get -\u003eReset -\u003edeal-\u003ePut，Put 后无归还对象引用 适用于大部分需要池化的场景 特殊处理流: Get -\u003eReset -\u003edeal-\u003ePut-\u003edeal with ref，Put 后存在归还对象的引用 特殊场景，如: GRPC service call 如非必要，务必不要使用 如要使用，请进行容错处理，尽最大可能降低副作用 警告 请尽可能的按照正常处理流进行使用 务必保证: Get \u0026 Put 成对出现 对Put(归还)后对象存在引用，若处理不当，可能会导致数据异常 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:2:0","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"对象池数据结构 sync.pool: 适用于大多数场景，易用高效 池中的对象会在没有任何通知的情况下被移出（释放或者重新取出使用）。如果 pool 中持有某个对象的唯一引用，则该对象很可能会被回收。 channel: 具有队列特性；内存占用趋于稳定，且不主动释放 ring buffer: 具有队列特性；内存占用趋于稳定，且不主动释放；无锁 read \u0026 write 结构 最小容量 最大容量 优点 缺点 sync.pool 0 ∞ 简单易用 回收不可控 channel 0 cap 可支持引用 QPS受限于cap，内存占用 ring buffer 0 cap 可支持引用，无锁 QPS受限于cap，内存占用 技巧 支持引用的处理思路: 适当增加冗余对象数量，即初始化最少容量\u003e=1*QPS ~ 2*QPS，以减少对象引用可能造成的数据异常情况 以较少的空间占用换区对象池使用带来的高收益 务必预估你的内存占用量 务必注意单个对象的最大声明周期，耗时较长的操作请谨慎使用 如: 超过 1s 且 QPS 较高 初始化时容量设置: 最小容量=最大容量\u003e=1*QPS，尽可能只做一次分配 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:3:0","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"源码示例 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:0","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"fmt/print.go src/fmt/print.go var ppFree = sync.Pool{ New: func() any { return new(pp) }, } // newPrinter allocates a new pp struct or grabs a cached one. func newPrinter() *pp { p := ppFree.Get().(*pp) p.panicking = false p.erroring = false p.wrapErrs = false p.fmt.init(\u0026p.buf) return p } // free saves used pp structs in ppFree; avoids an allocation per invocation. func (p *pp) free() { // Proper usage of a sync.Pool requires each entry to have approximately // the same memory cost. To obtain this property when the stored type // contains a variably-sized buffer, we add a hard limit on the maximum buffer // to place back in the pool. // // See https://golang.org/issue/23199 if cap(p.buf) \u003e 64\u003c\u003c10 { return } p.buf = p.buf[:0] p.arg = nil p.value = reflect.Value{} p.wrappedErr = nil ppFree.Put(p) } ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:1","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"grpc transport pool google.golang.org/grpc/internal/transport/transport.go type bufferPool struct { pool sync.Pool } func newBufferPool() *bufferPool { return \u0026bufferPool{ pool: sync.Pool{ New: func() interface{} { return new(bytes.Buffer) }, }, } } func (p *bufferPool) get() *bytes.Buffer { return p.pool.Get().(*bytes.Buffer) } func (p *bufferPool) put(b *bytes.Buffer) { p.pool.Put(b) } ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:2","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"gin Context pool github.com/gin-gonic/gin/gin.go // ServeHTTP conforms to the http.Handler interface. func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) { c := engine.pool.Get().(*Context) c.writermem.reset(w) c.Request = req c.reset() engine.handleHTTPRequest(c) engine.pool.Put(c) } ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:3","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"sarama compress pool github.com/Shopify/sarama/compress.go var ( lz4WriterPool = sync.Pool{ New: func() interface{} { return lz4.NewWriter(nil) }, } gzipWriterPool = sync.Pool{ New: func() interface{} { return gzip.NewWriter(nil) }, } gzipWriterPoolForCompressionLevel1 = sync.Pool{ New: func() interface{} { gz, err := gzip.NewWriterLevel(nil, 1) if err != nil { panic(err) } return gz }, } // ... ) func compress(cc CompressionCodec, level int, data []byte) ([]byte, error) { switch cc { case CompressionNone: return data, nil case CompressionGZIP: var ( err error buf bytes.Buffer writer *gzip.Writer ) switch level { case CompressionLevelDefault: writer = gzipWriterPool.Get().(*gzip.Writer) defer gzipWriterPool.Put(writer) writer.Reset(\u0026buf) case 1: writer = gzipWriterPoolForCompressionLevel1.Get().(*gzip.Writer) defer gzipWriterPoolForCompressionLevel1.Put(writer) writer.Reset(\u0026buf) // ... default: writer, err = gzip.NewWriterLevel(\u0026buf, level) if err != nil { return nil, err } } if _, err := writer.Write(data); err != nil { return nil, err } if err := writer.Close(); err != nil { return nil, err } return buf.Bytes(), nil case CompressionSnappy: return snappy.Encode(data), nil case CompressionLZ4: writer := lz4WriterPool.Get().(*lz4.Writer) defer lz4WriterPool.Put(writer) var buf bytes.Buffer writer.Reset(\u0026buf) if _, err := writer.Write(data); err != nil { return nil, err } if err := writer.Close(); err != nil { return nil, err } return buf.Bytes(), nil case CompressionZSTD: return zstdCompress(ZstdEncoderParams{level}, nil, data) default: return nil, PacketEncodingError{fmt.Sprintf(\"unsupported compression codec (%d)\", cc)} } } ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:4","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"zap json pool go.uber.org/zap/zapcore/json_encoder.go var _jsonPool = sync.Pool{New: func() interface{} { return \u0026jsonEncoder{} }} func getJSONEncoder() *jsonEncoder { return _jsonPool.Get().(*jsonEncoder) } func putJSONEncoder(enc *jsonEncoder) { if enc.reflectBuf != nil { enc.reflectBuf.Free() } enc.EncoderConfig = nil enc.buf = nil enc.spaced = false enc.openNamespaces = 0 enc.reflectBuf = nil enc.reflectEnc = nil _jsonPool.Put(enc) } ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:5","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"leakbuf base channel shadowsocks/shadowsocks-go/shadowsocks/leakybuf // Provides leaky buffer, based on the example in Effective Go. package shadowsocks type LeakyBuf struct { bufSize int // size of each buffer freeList chan []byte } const leakyBufSize = 4108 // data.len(2) + hmacsha1(10) + data(4096) const maxNBuf = 2048 var leakyBuf = NewLeakyBuf(maxNBuf, leakyBufSize) // NewLeakyBuf creates a leaky buffer which can hold at most n buffer, each // with bufSize bytes. func NewLeakyBuf(n, bufSize int) *LeakyBuf { return \u0026LeakyBuf{ bufSize: bufSize, freeList: make(chan []byte, n), } } // Get returns a buffer from the leaky buffer or create a new buffer. func (lb *LeakyBuf) Get() (b []byte) { select { case b = \u003c-lb.freeList: default: b = make([]byte, lb.bufSize) } return } // Put add the buffer into the free buffer pool for reuse. Panic if the buffer // size is not the same with the leaky buffer's. This is intended to expose // error usage of leaky buffer. func (lb *LeakyBuf) Put(b []byte) { if len(b) != lb.bufSize { panic(\"invalid buffer size that's put into leaky buffer\") } select { case lb.freeList \u003c- b: default: } return } 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-06-03","objectID":"/go-object-pool-usage-tips-theory/:4:6","tags":["go","性能优化"],"title":"Go 对象池使用及优化-理论篇","uri":"/go-object-pool-usage-tips-theory/"},{"categories":["go"],"content":"Go Kafka consumer group 使用示例及注意事项","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"本文基于 Go 1.18、Kafka 2.4.1， 利用 Kafka Consumer Group 进行消息消费，提供了最佳范例及部分配置建议，减少因 Rebalance 引起的 timeout 问题发生。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:0:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"Consumer Group consumer group 是 kafka 提供的可扩展且具有容错性的消费者机制。具有一些特性: consumer group 由一个或多个 consumer 组成，它们共同消费一个或多个 topic 中的消息 consumer group 由 group ID 唯一标识，组内消费者共享 group ID 一个 topic 的每个分区只能被同一个消费者组中的一个 consumer 消费，但可以被不同组中的消费者进行消费 技巧 分区数应大于消费者个数，消费能力不足时可以考虑增加消费者个数 当单纯提升消费者个数不能显著增加消费能力时，考虑优化你的消费处理逻辑 消费者个数必须进行限制，避免 rebalance 耗时过长 ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:1:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"Rebalance 分区的重平衡 (Rebalance) 是 Kafka 一个很重要特性，它可以保证系统的高可用和系统的水平扩展。以下几种情况会触发 Kafka 发生重平衡。 消费者组成员变化: 新消费者加入 老消费者离开: 主动离开，主动 rebalance 老消费者故障离开或崩溃: 超过一定时间未发送心跳，可被视为宕机，需要在一个 session.timeout 周期才能检测到，被动 rebalance 订阅的 topic 数量变化: 如通过正则方式进行订阅，所匹配 topic 的数量变化 订阅的 topic 分区数变化 注意 优点: 可以保证高可用性和扩展性 缺点: 重平衡期间，整个消费者组不可用；重平衡会导致消费者需要更新状态，原消费者状态过期，降低消费者能力 ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:2:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"GO Consumer Group ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:3:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"ConsumerGroup 接口及说明 // ConsumerGroup is responsible for dividing up processing of topics and partitions // over a collection of processes (the members of the consumer group). type ConsumerGroup interface { // Consume joins a cluster of consumers for a given list of topics and // starts a blocking ConsumerGroupSession through the ConsumerGroupHandler. // // The life-cycle of a session is represented by the following steps: // // 1. The consumers join the group (as explained in https://kafka.apache.org/documentation/#intro_consumers) // and is assigned their \"fair share\" of partitions, aka 'claims'. // 2. Before processing starts, the handler's Setup() hook is called to notify the user // of the claims and allow any necessary preparation or alteration of state. // 3. For each of the assigned claims the handler's ConsumeClaim() function is then called // in a separate goroutine which requires it to be thread-safe. Any state must be carefully protected // from concurrent reads/writes. // 4. The session will persist until one of the ConsumeClaim() functions exits. This can be either when the // parent context is canceled or when a server-side rebalance cycle is initiated. // 5. Once all the ConsumeClaim() loops have exited, the handler's Cleanup() hook is called // to allow the user to perform any final tasks before a rebalance. // 6. Finally, marked offsets are committed one last time before claims are released. // // Please note, that once a rebalance is triggered, sessions must be completed within // Config.Consumer.Group.Rebalance.Timeout. This means that ConsumeClaim() functions must exit // as quickly as possible to allow time for Cleanup() and the final offset commit. If the timeout // is exceeded, the consumer will be removed from the group by Kafka, which will cause offset // commit failures. // This method should be called inside an infinite loop, when a // server-side rebalance happens, the consumer session will need to be // recreated to get the new claims. Consume(ctx context.Context, topics []string, handler ConsumerGroupHandler) error // Errors returns a read channel of errors that occurred during the consumer life-cycle. // By default, errors are logged and not returned over this channel. // If you want to implement any custom error handling, set your config's // Consumer.Return.Errors setting to true, and read from this channel. Errors() \u003c-chan error // Close stops the ConsumerGroup and detaches any running sessions. It is required to call // this function before the object passes out of scope, as it will otherwise leak memory. Close() error } ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:3:1","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"ConsumerGroup Demo package kafka import ( \"context\" \"log\" \"time\" \"github.com/Shopify/sarama\" \"github.com/pkg/errors\" ) type ConsumerGroup interface { Consume(topics []string, handler sarama.ConsumerGroupHandler) } type consumerGroup struct { ctx context.Context consumerGroup sarama.ConsumerGroup groupId string brokers []string done chan struct{} cancel context.CancelFunc } func NewConsumerGroup(ctx context.Context, groupId string, brokers []string) ConsumerGroup { config := sarama.NewConfig() config.Version = sarama.V2_4_1_0 config.Consumer.Return.Errors = true config.Net.ReadTimeout = time.Second * 75 // default 30s config.Consumer.Group.Rebalance.Timeout = time.Second * 60 // default 60s config.Consumer.Group.Session.Timeout = time.Second * 45 // default 10s config.Consumer.Group.Heartbeat.Interval = time.Second * 5 // default 3s, must \u003c= 1/3 * Group.Session.Timeout config.Consumer.Group.Rebalance.Strategy = sarama.BalanceStrategySticky config.Consumer.MaxWaitTime = time.Millisecond * 250 // default 250ms config.Consumer.Retry.Backoff = time.Second * 2 // default 2s cg, err := sarama.NewConsumerGroup(brokers, groupId, config) if err != nil { panic(errors.Wrap(err, \"consumerGroup create err\")) } go func() { for err := range cg.Errors() { log.Printf(\"consumerGroup, group_id:%v, err:%v\", groupId, err) } }() ctx, cancel := context.WithCancel(ctx) return \u0026consumerGroup{ ctx: ctx, consumerGroup: cg, groupId: groupId, brokers: brokers, done: make(chan struct{}), cancel: cancel, } } func (c *consumerGroup) Consume(topics []string, handler sarama.ConsumerGroupHandler) { go func() { defer func(consumerGroup sarama.ConsumerGroup) { err := consumerGroup.Close() if err != nil { } }(c.consumerGroup) Loop: for { if err := c.consumerGroup.Consume(c.ctx, topics, handler); err != nil { switch err { case sarama.ErrClosedClient, sarama.ErrClosedConsumerGroup: log.Printf(\"consumerGroup.Consume() topic:%v, shutdown with err:%v\", topics, err) break Loop case sarama.ErrOutOfBrokers: log.Printf(\"consumerGroup.Consume() topic:%v, err:%v\", topics, sarama.ErrOutOfBrokers) default: log.Printf(\"consumerGroup.Consume() topic:%v, err:%v\", topics, err) } time.Sleep(time.Second) } select { case \u003c-c.done: log.Printf(\"session exit after close signal\") break Loop default: log.Printf(\"server-side reBalance happens, consumer session exit, will recreated\") } } }() } func (c *consumerGroup) Close() { go func() { c.done \u003c- struct{}{} }() c.cancel() if err := c.consumerGroup.Close(); err != nil { log.Printf(\"consumerGroup close error, %v\", err) } else { log.Printf(\"consumerGroup exit gracefully\") } } ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:3:2","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"部分配置参数说明 Net.ReadTimeout: How long to wait for a response. Group.Rebalance.Timeout: The maximum allowed time for each worker to join the group once a rebalance has begun.This is basically a limit on the amount of time needed for all tasks to flush any pending data and commit offsets. If the timeout is exceeded, then the worker will be removed from the group, which will cause offset commit failures (default 60s). Group.Session.Timeout: The timeout used to detect consumer failures when using Kafka’s group management facility. The consumer sends periodic heartbeats to indicate its liveness to the broker. If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this consumer from the group and initiate a rebalance. Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms (default 10s) Group.Heartbeat.Interval: The expected time between heartbeats to the consumer coordinator when using Kafka’s group management facilities. Heartbeats are used to ensure that the consumer’s session stays active and to facilitate rebalancing when new consumers join or leave the group. The value must be set lower than Consumer.Group.Session.Timeout, but typically should be set no higher than 1/3 of that value. Group.Rebalance.Strategy: Strategy for allocating topic partitions to members (default BalanceStrategyRange), [“range”, “roundrobin”, “sticky”] MaxWaitTime:The maximum amount of time the broker will wait for Consumer.Fetch.Min bytes to become available before it returns fewer than that anyways. Retry.Backoff: How long to wait after a failing to read from a partition before trying again. ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:4:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"参数配置建议 Net.ReadTimeout: 默认值 30s，如果消费者常出现 read tcp xxx i/o timeout 可考虑增大此值 \u003e session.timeout \u003e rebalance.timeout Group.Rebalance.Timeout: 默认值 60s，如果消费者较多可考虑增大此值；对于 TPS 较低的主题可以适当降低此值 Group.Session.Timeout: 默认值 10s，消费者未上报心跳超过此时间则认为宕机，触发 rebalance shall \u003e= 1/3 * Group.Heartbeat.Interval Group.Heartbeat.Interval: 默认值 3s 消费者心跳上报间隔 Group.Rebalance.Strategy: rebalance 策略 range: default，针对每一个 topic，n=分区数/消费者数量, m=分区数%消费者数量，前 m 个消费者每个分配 n+1 个分区，后面的 （消费者数量-m）个消费者每个分配 n 个分区 roundrobin: 将消费组内所有消费者以及消费者所订阅的所有 topic 的 partition 按照字典序排序，然后通过轮询方式逐个将分区以此分配给每个消费者 sticky: 粘性策略，尽可能保证消费者消费数据均匀 分区的分配要尽可能的均匀，分配给消费者者的主题分区数最多相差一个 分区的分配尽可能的与上次分配的保持相同 MaxWaitTime: 默认值 250ms，最多等待此时间或数据达到 fetch.min.bytes 后发送数据给消费者 Retry.Backoff: 默认值 2s ","date":"2022-05-25","objectID":"/go-kafka-consumer-group-usage/:5:0","tags":["go","kafka"],"title":"Go Kafka Consumer Group Usage","uri":"/go-kafka-consumer-group-usage/"},{"categories":["go"],"content":"Pyroscope Go 性能数据持续收集分析","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"Pyroscope 开放源码的性能持续分析平台。支持多种语言：Go, Python, Rust, Java 等，支持多平台，多种部署方式。具有便捷的可视化分析界面，极致的数据查询、分析与存储能力，可配的数据淘汰策略，Push 与 Pull 模式。可支持多种数据导出格式： png，json， pprof， html，flamegraph.com，可接入 grafana 展示。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:0:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"为什么使用 了解应用程序的哪些部分消耗资源最多 持续性分析增加了一个时间维度，允许您随着时间的推移了解系统资源使用情况(如 CPU、内存等) ，并使你能够定位、调试和修复与性能相关的问题。 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:1:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"使用场景 查找代码中的性能问题 解决高 CPU 利用率的问题 定位并修复内存泄漏 理解应用程序的调用树 跟踪指标随时间的变化 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:2:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"负载消耗 通过使用采样分析，Pyroscope 能够以最小的开销(约为 2-5%)收集数据。 特别构建的存储引擎能高效地压缩和存储数据。 由于采样分析技术，CPU 开销较低 控制分析数据粒度(10s 至多年) 高效的压缩，低的磁盘空间需求和成本 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:3:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"工作模式 类似于常见的数据采集处理工具，Agent-Server 模式。 Pyroscope Server 记录并聚合应用程序正在执行的操作，然后将该数据发送到 Pyroscope 服务器。 Pyroscope Agent 处理、聚合和存储来自代理的数据，以实现任意时间范围内的快速查询。稍后，你可以查看在任何时间范围内的分析数据。 pyroscope agentspyroscope-agents \" pyroscope agents ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:4:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"Server 安装 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:5:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"安装部署方式 Docker K8S Direct MacOS Linux Windows ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:5:1","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"MacOS 与 Linux 安装示例 install-macos install-linux 示例 export pyroscope_version=0.13.0 # MacOs brew install pyroscope-io/brew/pyroscope brew services start pyroscope-server # Ubuntu/Debian wget https://dl.pyroscope.io/release/pyroscope_\"${pyroscope_version}\"_amd64.deb sudo apt-get install ./pyroscope_\"${pyroscope_version}\"_amd64.deb # CentOS wget https://dl.pyroscope.io/release/pyroscope-\"${pyroscope_version}\"-1-x86_64.rpm sudo yum localinstall pyroscope-\"${pyroscope_version}\"-1-x86_64.rpm # Use systemctl to enable boot start and start the service sudo systemctl enable pyroscope-server sudo systemctl start pyroscope-server ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:5:2","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"配置 支持多种配置，优先级如下： 命令行参数 环境变量 配置文件 我们将使用配置文件进行服务端的配置。配置文件默认位置： /etc/pyroscope/server.yml on Linux /usr/local/etc/pyroscope/server.yml on Intel macOS /opt/homebrew/etc/pyroscope/server.yml on M1 macOS 可通过参数指定配置文件路径： pyroscope server -config my-custom-config.yml 命令行方式指定 推荐 PYROSCOPE_CONFIG=/tmp/pyroscope-server.yml pyroscope server 环境变量指定 示例 pyroscope-server.yml --- auth: # Specifies which role will be granted to a newly signed up user. # Supported roles: Admin, ReadOnly. Defaults to ReadOnly. # The parameter affects all authentication providers. signup-default-role: ReadOnly # Internal authentication provider configuration. internal: admin: create: true enabled: true signup-enabled: true # Disables analytics. analytics-opt-out: \"false\" # Log level: debug|info|warn|error. log-level: \"info\" # Log level: debug|info|warn|error. badger-log-level: \"error\" # Directory where pyroscope stores profiling data. storage-path: \"/var/lib/pyroscope\" # Port for the HTTP server used for data ingestion and web UI. api-bind-addr: \":4040\" # Base URL for when the server is behind a reverse proxy with a different path. base-url: \"\" # Percentage of memory at which cache evictions start. cache-evict-threshold: \"0.25\" # Percentage of cache that is evicted per eviction run. cache-evict-volume: \"0.33\" # Database configuration. By default, Pyroscope Server uses embedded sqlite3 database. database: # Indicates the database type. Supported DB engines: sqlite3. type: \"sqlite3\" # Database connection string. Specific to the engine. url: \"/var/lib/pyroscope/pyroscope.db\" # Indicates whether value log files should be truncated to delete corrupt data, if any. badger-no-truncate: \"false\" # Disables /debug/pprof route. disable-pprof-endpoint: \"false\" # Max number of nodes used when saving profiles to disk. max-nodes-serialization: \"2048\" # Max number of nodes used to display data on the frontend. max-nodes-render: \"8192\" # Please don't use, this will soon be deprecated. hide-applications: [] # Sets the maximum amount of time the profiling data is stored for. Data before this threshold is deleted. Disabled by default. # retention: \"0s\" retention: \"480h\" # Specifies how long the profiling data is stored per aggregation level. Disabled by default. # retention-levels: {} # 0: 720h # 30 days # 1: 2160h # 90 days retention-levels: 0: 480h # 20 days 1: 1440h # 60 days # Metrics export rules. metrics-export-rules: {} # A list of scrape configurations. scrape-configs: [] # Location of TLS Certificate file (.crt). tls-certificate-file: \"\" # Location of TLS Private key file (.key). tls-key-file: \"\" ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:5:3","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"启动 pyroscope server -config pyroscope-server.yml.yml ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:5:4","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"Go Agent 使用 采用 Push 模式，简单高效。 ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:6:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"依赖导入 go get github.com/pyroscope-io/client/pyroscope ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:6:1","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"Agent Push 示例 package main import \"github.com/pyroscope-io/client/pyroscope\" func main() { pyroscope.Start(pyroscope.Config{ ApplicationName: \"simple.golang.app\", // replace this with the address of pyroscope server ServerAddress: \"http://pyroscope-server:4040\", // you can disable logging by setting this to nil Logger: pyroscope.StandardLogger, // optionally, if authentication is enabled, specify the API key: // AuthToken: os.Getenv(\"PYROSCOPE_AUTH_TOKEN\"), // by default all profilers are enabled, // but you can select the ones you want to use: ProfileTypes: []pyroscope.ProfileType{ pyroscope.ProfileCPU, pyroscope.ProfileAllocObjects, pyroscope.ProfileAllocSpace, pyroscope.ProfileInuseObjects, pyroscope.ProfileInuseSpace, }, }) // your code goes here } ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:6:2","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"认证登录 默认用户及密码为: admin:admin api-key-authentication 内部身份验证 pyroscope admin user reset-password --username {admin-username} --password {new-password} ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:7:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"数据查询导出 grafana 配置 API UI 界面操作 png json pprof html flamegraph.com proscope server table flamegraphproscope-server-table-flamegraph \" proscope server table flamegraph ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:8:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["go"],"content":"参考 pyroscope docs pyroscope-io ","date":"2022-03-29","objectID":"/pyroscope-continuous-profiling/:9:0","tags":["go","profiling"],"title":"Pyroscope Go 性能数据持续收集分析","uri":"/pyroscope-continuous-profiling/"},{"categories":["documentation"],"content":"docker 相关命令备忘参考","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker 相关命令备忘参考，主要关于 Docker CLI 与 Compose CLI。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 Docker version: Docker version 20.10.12, build e91ed57 Compose version: Docker Compose version 2.2.2 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:0:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker 相关参考资源 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:1:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"文件格式 File format Description Dockerfile Defines the contents and startup behavior of a single container Compose file Defines a multi-container application ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:1:1","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"命令行接口 (CLIs) CLI Description Docker CLI The main CLI for Docker, includes all docker commands Compose CLI The CLI, which allows you to build and run multi-container applications dockerd Persistent process that manages containers ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:1:2","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"应用程序接口 (APIs) API Description Engine API The main API for Docker, provides programmatic access to a daemon Registry API Facilitates distribution of images to the engine Docker Hub API API to interact with Docker Hub ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:1:3","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"驱动与规范 Driver Description Image specification Describes the various components of a Docker image Registry token authentication Outlines the Docker registry authentication scheme Registry storage drivers Enables support for given cloud providers when storing images with Registry ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:1:4","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker CLI 用法 示例 Usage: docker [OPTIONS] COMMAND A self-sufficient runtime for containers Options: --config string Location of client config files (default \"/Users/wangxin/.docker\") -c, --context string Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\") -D, --debug Enable debug mode -H, --host list Daemon socket(s) to connect to -l, --log-level string Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\") --tls Use TLS; implied by --tlsverify --tlscacert string Trust certs signed only by this CA (default \"/Users/wangxin/.docker/ca.pem\") --tlscert string Path to TLS certificate file (default \"/Users/wangxin/.docker/cert.pem\") --tlskey string Path to TLS key file (default \"/Users/wangxin/.docker/key.pem\") --tlsverify Use TLS and verify the remote -v, --version Print version information and quit Management Commands: builder Manage builds buildx* Docker Buildx (Docker Inc., v0.7.1) compose* Docker Compose (Docker Inc., 2.2.2) config Manage Docker configs container Manage containers context Manage contexts image Manage images manifest Manage Docker image manifests and manifest lists network Manage networks node Manage Swarm nodes plugin Manage plugins scan* Docker Scan (Docker Inc., v0.17.0) secret Manage Docker secrets service Manage services stack Manage Docker stacks swarm Manage Swarm system Manage Docker trust Manage trust on Docker images volume Manage volumes Commands: attach Attach local standard input, output, and error streams to a running container build Build an image from a Dockerfile commit Create a new image from a container's changes cp Copy files/folders between a container and the local filesystem create Create a new container diff Inspect changes to files or directories on a container's filesystem events Get real time events from the server exec Run a command in a running container export Export a container's filesystem as a tar archive history Show the history of an image images List images import Import the contents from a tarball to create a filesystem image info Display system-wide information inspect Return low-level information on Docker objects kill Kill one or more running containers load Load an image from a tar archive or STDIN login Log in to a Docker registry logout Log out from a Docker registry logs Fetch the logs of a container pause Pause all processes within one or more containers port List port mappings or a specific mapping for the container ps List containers pull Pull an image or a repository from a registry push Push an image or a repository to a registry rename Rename a container restart Restart one or more containers rm Remove one or more containers rmi Remove one or more images run Run a command in a new container save Save one or more images to a tar archive (streamed to STDOUT by default) search Search the Docker Hub for images start Start one or more stopped containers stats Display a live stream of container(s) resource usage statistics stop Stop one or more running containers tag Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE top Display the running processes of a container unpause Unpause all processes within one or more containers update Update configuration of one or more containers version Show the Docker version information wait Block until one or more containers stop, then print their exit codes Run 'docker COMMAND --help' for more information on a command. To get more help with docker, check out our guides at https://docs.docker.com/go/guides/ ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:2:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker Compose CLI 用法 示例 Usage: docker compose [OPTIONS] COMMAND Docker Compose Options: --ansi string Control when to print ANSI control characters (\"never\"|\"always\"|\"auto\") (default \"auto\") --compatibility Run compose in backward compatibility mode --env-file string Specify an alternate environment file. -f, --file stringArray Compose configuration files --profile stringArray Specify a profile to enable --project-directory string Specify an alternate working directory (default: the path of the Compose file) -p, --project-name string Project name Commands: build Build or rebuild services convert Converts the compose file to platform's canonical format cp Copy files/folders between a service container and the local filesystem create Creates containers for a service. down Stop and remove containers, networks events Receive real time events from containers. exec Execute a command in a running container. images List images used by the created containers kill Force stop service containers. logs View output from containers ls List running compose projects pause Pause services port Print the public port for a port binding. ps List containers pull Pull service images push Push service images restart Restart containers rm Removes stopped service containers run Run a one-off command on a service. start Start services stop Stop services top Display the running processes unpause Unpause services up Create and start containers version Show the Docker Compose version information Run 'docker compose COMMAND --help' for more information on a command. ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:3:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker 命令 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker 常用管理命令 docker context [--help] 上下文管理 docker compose [--help] docker compose 命令 v2.2.2+ docker container [--help] docker 容器命令 docker image [--help] docker 镜像命令 docker image prune 删除所有未被 tag 标记和未被容器使用的镜像，标记为 \u003cnone\u003e 的 docker volume [--help] 目录挂载命令 docker network [--help] docker 网络命令 docker system [--help] docker 系统命令 docker system df 磁盘使用查看 docker system info == docker info Display system-wide information docker scan [--help] docker 镜像扫描分析 docker manifest [--help] docker 镜像清单查看，实验特性 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:1","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker 常用命令 docker build [--help] 镜像构建 docker build [[-t tag] ...] -f [PATH/Dockerfile] . docker build -t tag1 -t tag2 -f [PATH/Dockerfile] . 可同时生成多个 tag 镜像 docker commit [OPTIONS] \u003ccontainer\u003e \u003cREPOSITORY[:TAG]\u003e 基于容器创建镜像 docker cp 容器与本地文件之间复制 docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|- docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH docker create [OPTIONS] IMAGE [COMMAND] [ARG...] 一般使用 docker run 直接创建并运行 docker history = docker image history 镜像历史查看 docker images 查看镜像列表 docker login docker search docker tag docker pull docker build docker run docker push docker stop docker logs ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:2","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"docker 镜像过滤查找 docker images -f [filter params] dangling=(true|false) none tag images label=\u003ckey\u003e or label=\u003ckey\u003e=\u003cvalue\u003e 通过 label 过滤 before=(\u003cimage-name\u003e[:tag]|\u003cimage-id\u003e|\u003cimage@digest\u003e) since=(\u003cimage-name\u003e[:tag]|\u003cimage-id\u003e|\u003cimage@digest\u003e) reference=(pattern of an image reference) docker images -f dangling=true docker images -f label=author docker images -f label=author=xwi88 docker images -f reference=\"v8fg/*\" docker images -f reference=\"v8fg/alpine\" docker images -f reference=\"v8fg/alpine:*\" docker images -f reference=\"v8fg/golang:1.18*\" docker images -f reference=\"v8fg/golang:*1.18*\" docker images -f reference=\"[REPOSITORY:TAG]\" docker images -f reference=\"tes*\" docker images -f reference=\"test\" docker images -f reference=\"test*2\" 警告 测试发现，如果 REPOSITORY 中含有 / 则通过 reference 正则查询时，必须包含 / 否则无法匹配出来，也即 / 无法被 filter 正则匹配 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:3","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"docker commit 基于容器创建镜像 docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] Usage: docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]] Create a new image from a container's changes Options: -a, --author string Author (e.g., \"John Hannibal Smith \u003channibal@a-team.com\u003e\") -c, --change list Apply Dockerfile instruction to the created image -m, --message string Commit message -p, --pause Pause container during commit (default true) ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:4","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"prune 镜像容器等一键删除 docker image prune -a 删除所有未被容器使用的镜像 docker container prune 删除所有停止运行容器 docker volume prune 删除所有未被挂载的卷 docker system prune 删除 docker 所有资源 docker network prune 删除所有网络 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:4:5","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Simple Cheat Sheet demo images: v8fg/demo 演示镜像: v8fg/demo[:latest] 演示容器名: v8fg-demo ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Running Containers command note docker run -it v8fg/demo bash Run container and specify command docker run -it v8fg/demo Run container docker run -tid v8fg/demo Run container detatched, -tty docker create -ti v8fg/demo Create a container without starting it docker run -tid --name v8fg-demo v8fg/demo named container docker ps show running containers docker ps -a show all containers docker ps --filter name=v8fg show matching containers docker ps --filter name=demo -q show matching container ID docker inspect v8fg-demo inspect container 示例 经上面操作后，部分输出如下 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 01430cc7b2c0 v8fg/demo \"/bin/sh\" 11 seconds ago Up 11 seconds v8fg-demo 83ce7dee0346 v8fg/demo \"/bin/sh\" About a minute ago Created thirsty_bassi 1bd61cc802f1 v8fg/demo \"/bin/sh\" About a minute ago Up About a minute relaxed_beaver be104825d061 v8fg/demo \"/bin/sh\" About a minute ago Exited (0) About a minute ago flamboyant_beaver 8cfe1c19773f v8fg/demo \"bash\" About a minute ago Exited (0) About a minute ago flamboyant_euclid ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:1","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Container Lifecycle Stuff command note docker start v8fg-demo start docker stop v8fg-demo stop docker stop v8fg-demo relaxed_beaver stop mutliple docker restart v8fg-demo restart container docker pause v8fg-demo pauses a running container, freeze in place docker unpause v8fg-demo unpause a container docker wait v8fg-demo blocks until running container stops docker kill v8fg-demo sends SIGKILL, faster than stop docker rm v8fg-demo remove docker rm v8fg-demo relaxed_beaver remove multiple docker rm -f v8fg-demo force remove docker container rm -f $(docker ps -aq) Remove all containers, running or stopped ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:2","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Resource Limits and Controls command note docker run -tid -c 512 v8fg/demo 50% cpu docker run -tid --cpu-shares 2 v8fg/demo CPU shares (relative weight) docker run -tid --cpus 2 v8fg/demo number of CPUs docker run -tid --cpuset-cpus=0,4,6 v8fg/demo use these cpus docker run -tid -m 300M v8fg/demo limit memory docker create -ti --storage-opt size=5G v8fg/demo limit storage, not on aufs docker run -tid -m 300M --cpus 1 --name v8fg-demo v8fg/demo limit memory ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:3","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Stats, Logs, and Events command note docker stats resourse stats for all containers docker stats v8fg-demo resource stats for one container docker top v8fg-demo shows processes in a container docker logs v8fg-demo container logs docker events watch events in real time docker port v8fg-demo shows public facing port of container docker diff v8fg-demo show changes to a container’s file system ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:4","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker Images command note docker images show images docker history v8fg/demo show history of image docker image rm v8fg/demo remove image docker image remove ddd4b27c1c67 remove by id docker image remove v8fg/demo remove image docker rmi v8fg/demo remove image docker rmi $(docker images -q) remove all images Commit container to an image: docker commit v8fg-demo no repo name docker commit v8fg-demo test1 repo name docker commit v8fg-demo v8fg/test1 repo name docker commit v8fg-demo v8fg/test1:my-update tagged docker commit v8fg-demo v8fg/test1:v1.2.3 tagged ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:5","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Export/Import/Save/Load export, import: 不保留层历史信息，较小 制作基础镜像，去除历史 save, load: 保留层历史信息，较大 command note docker export export container to tarball archive stream docker import create image from tarball, excludes history ( smaller image ) docker save save image to tar archive stream ( includes parent layers ) docker load load an image from tarball, includes history ( larger image ) Examples: docker export v8fg-demo | gzip \u003e v8fg-demo-container-export.tar.gz cat v8fg-demo-container-export.tar.gz | docker import - v8fg-demo:latest-import docker save v8fg/demo | gzip \u003e v8fg-demo-image-save.tar.gz docker load \u003c v8fg-demo-image-save.tar.gz ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:6","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Docker Hub/Registry command note docker login Login to Registry docker logout Logout of Registry docker tag ddd4b27c1c67 v8fg/demo:local-v1 Tag an image docker push v8fg/demo Push to registry docker search v8fg docker search v8fg/golang docker search golang docker pull v8fg/demo Pull it down, default latest docker run v8fg/demo:alpine Will be downloaded if it isn`t here ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:7","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Building Docker Images From A Dockerfile command note mkdir mydockerbuild Create build dir cd mydockerbuild cd into build dir vi Dockerfile Edit build instructions docker build -t mydockerimage . docker images Show images docker run mydockerimage Run the new image ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:8","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Simple Dockerfile Example v8fg/demo:latest ARG FROM_REPOSITORY=alpine FROM_TAG=3.15.1FROM${FROM_REPOSITORY}:${FROM_TAG}LABEL author=xwi88 type=demo name=latest github=\"https://github.com/xwi88\" group=\"https://github.com/v8fg\"RUN apk add --no-cache tzdata bashENV TZ=Asia/Shanghai v8fg/demo:ubuntu FROMubuntuLABEL author=xwi88 type=demo name=ubuntu github=\"https://github.com/xwi88\" group=\"https://github.com/v8fg\"RUN apt-get update \u0026\u0026 apt-get install nginx -y \u0026\u0026 apt-get clean \u0026\u0026 apt-get autoclean \u0026\u0026 rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*CMD [\"/usr/sbin/nginx\"] ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:9","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Big Dockerfile Example command note FROM ubuntu base image RUN apt update run commands while building RUN apt install nginx -y run commands while building WORKDIR ~/ working dir that CMD is run from ENTRYPOINT echo default application CMD “echo” “Hello docker!” main command / default application CMD [\"--port 27017\"] params for ENTRYPOINT CMD “Hello docker!” params for ENTRYPOINT ENV SERVER_WORKS 4 set env variable EXPOSE 8080 expose a port, not published to the host MAINTAINER authors_name deprecated LABEL version=“1.0” add metadata LABEL author=“User One” add metadata USER 751 UID (or username) to run as VOLUME [\"/my_files\"] sets up a volume COPY test relativeDir/ copies “test” to WORKDIR/relativeDir/ COPY test /absoluteDir/ copies “test” to /absoluteDir/ COPY ssh_config /etc/ssh/ssh_config copy over a vile COPY --chown=user1:group1 files* /data/ also changes ownership ADD /dir1 /dir2 like copy but does more … ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:10","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Volumes/Storage command note docker info grep -i storage docker inspect v8fg-demo look for “Mounts” docker volume ls show voluems docker volume create testvol1 create a volume docker volume inspect testvol1 inspect a volume docker volume ls -f dangling=true find dangling ( unused ) volumes docker volume rm volume1 remove volume Running containers with volumes: docker run -d --name test1 -v /data v8fg/demo unamed volume mounted on /data docker run -d --name test2 -v vol1:/data v8fg/demo named volume docker run -d --name test3 -v /src/data:/data v8fg/demo bind mount docker run -d --name test4 -v /src/data:/data:ro v8fg/demo RO docker run -d --volumes-from test2 --name test5 v8fg/demo storage can be shared docker rm -v test1 remove container and unnamed volume Access and sharing parameters: :ro for read only :z shared all containers can read/write :Z private, unshared - `/var/lib/docker/overlay2 `Defalt volume storage location on Ubuntu Linux ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:11","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Expose Ports command note docker run -tid -p 1234:80 nginx expose container port 80 on host port 1234 `docker run -tid -p 80:5000 ubuntu `bind port docker run -tid -p 8000-9000:5000 ubuntu bind port to range `docker run -tid -p 80:5000/udp ubuntu `udp ports `docker run -tid -p 127.0.0.1:80:5000 ubuntu `bind port on an interface docker run -tid -p 127.0.0.1::5000 ubuntu bind any port, specific interface docker run -tid -P ubuntu exposed ports to random ports ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:12","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"Networks command note docker network ls show networks, bridge is default docker network inspect bridge show network details and connected containers Create Bridge Network, Specify Subnet and Gateway: docker network create -d bridge my-network docker network create -d bridge --subnet 172.25.0.0/16 my-network docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 my-network docker network rm my-network remove network Run container and specify network: docker run -tid --net=my-network --name test1 ubuntu Run container, specify network and IP: docker run -tid --net=my-network --ip=172.25.3.3 --name=test1 ubuntu Connect container to network: docker network connect net1 test1 docker network connect net1 test2 --ip 172.25.0.102 Disconnect container from network: `docker network disconnect net1 test1 `Disconnect container from this network docker network disconnect -f test1 test2 Force disconnect Find container’s IP address: docker inspect -f '{{json .NetworkSettings.Networks}}' container1 docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' container1 ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:5:13","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["documentation"],"content":"参考 docker run reference compose reference docker-cheat-sheet ","date":"2022-03-19","objectID":"/cheat-sheet-docker-related/:6:0","tags":["docker","cheat-sheet"],"title":"Docker 相关命令备忘参考","uri":"/cheat-sheet-docker-related/"},{"categories":["docker"],"content":"dockerfile 指令小抄与镜像构建示例","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"主要介绍 Dockerfile 文件内容组成，指令，镜像构建示例及操作。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:0:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"Dockerfile 简介 Dockerfile 是一个用来构建镜像的文本文件，由一条条构建镜像所需的指令（instruction）和说明组成。每一条指令构建一层。 默认执行构建命令 docker build . 会在当前路径下查找名为 Dockerfile 的文件，也可以指定路径及文件名：docker build -f xxx/path/DockerfileName . ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:1:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":".dockerignore 警告 为了提高构建的性能，可以通过在上下文目录中添加 .dockerignore 文件来排除文件和目录。如果你的项目目录下有较多或较大的不必要参与镜像构建的文件，请将其排除，这对于加快构建速度、减少镜像体积将会非常有用。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:2:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"基本组成 支持以 # 开头的注释行，可以放在任意行的开头位置，不建议在 # 前保留多余的空格。 基础镜像信息 维护者信息 镜像操作指令 容器启动执行指令 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:3:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"所有指令 FROM RUN CMD LABEL EXPOSE ENV ADD COPY ENTRYPOINT VOLUME USER WORKDIR ARG ONBUILD STOPSIGNAL HEALTHCHECK SHELL ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:4:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"FROM FROM [--platform=\u003cplatform\u003e] \u003cimage\u003e [AS \u003cname\u003e] FROM [--platform=\u003cplatform\u003e] \u003cimage\u003e[:\u003ctag\u003e] [AS \u003cname\u003e] FROM [--platform=\u003cplatform\u003e] \u003cimage\u003e[@\u003cdigest\u003e] [AS \u003cname\u003e] FROM 指令初始化一个新的构建阶段，并为后续指令设置基本镜像。因此，有效的 Dockerfile 必须以 FROM 指令开始。 ARG 是 Dockerfile 中能出现在 FROM 之前的唯一指令。 FROM 可以在单个 Dockerfile 中出现多次，以创建多个镜像，或者使用一个构建阶段作为另一个构建阶段的依赖项。只需在每个新的 FROM 指令之前记录提交的最后一个镜像 ID 即可。每个 FROM 指令都会清除前面指令创建的任何状态。 通过向 FROM 指令添加 AS \u003cname\u003e ，可以为新的构建阶段提供名称。可以在后续的 FROM 和 COPY --from=\u003cname\u003e 指令中使用该名称来引用在这个阶段构建的镜像。 标签 tag 或摘要值 digest 是可选的。如果省略它们中的任何一个，构建器将默认使用标签 latest。如果构建器找不到标记值，则返回一个错误。 可以通过 --platform=\u003cplatform\u003e 指定 FROM 引用的是哪个平台的镜像。例如：linux/amd64、 linux/arm64 或 windows/amd64。默认使用构建请求的目标平台。可以在这个标志中使用全局构建参数，如：全局范围内自动平台参数，允许你强制指定一个阶段的本机构建平台(--platform=$BUILDPLATFORM)，并使用它在此构建阶段内交叉编译到目标平台。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:5:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ARG 参数与 FROM 交互 由 ARG 指令声明的变量，可以出现在第一个 FROM 指令之前。 # FROM instructions support variables that are declared by any ARG instructions that occur before the first FROM.ARG CODE_VERSION=latest FROMbase:${CODE_VERSION}CMD /code/run-appFROMextras:${CODE_VERSION}CMD /code/run-extras ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:5:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ARG 参数作用域 # VERSION outside of a build stage, can`t be used in any instruction after a FROMARG VERSION=latest FROMbusybox:$VERSION# To use the default value of an ARG declared before the first FROM use an ARG instruction without a value inside of a build stageARG VERSIONRUN echo $VERSION \u003e image_versionARG VERSION=old # guess what? oldRUN echo $VERSION \u003e image_versionARG VERSION# guess what? latest, again use ARG VERSION without value will override the before $VERSIONRUN echo $VERSION \u003e image_version ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:5:2","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"RUN RUN \u003ccommand\u003e (以 shell 形式运行, linux 下默认: /bin/sh -c， Windows 下默认: cmd /S /C) RUN [\"executable\", \"param1\", \"param2\"] (exec 形式) RUN 指令将在当前镜像顶部的新层中执行任何命令并提交结果。生成的提交镜像将用于 Dockerfile 中的下一步。 exec 形式可以避免 shell 字符串转换，并使用不包含 shell 可执行文件的基本镜像运行命令。 可以使用 SHELL 命令更改默认 shell 可以使用 \\ backslash 让单条 RUN 指令跨行，适用于指令较长的情况。 替换默认 shell 示例 RUN /bin/bash -c 'source $HOME/.bashrc; \\ echo $HOME' # equivalent to RUN /bin/bash -c 'source $HOME/.bashrc; echo $HOME' The exec form is parsed as a JSON array, which means that you must use double-quotes (\") around words not single-quotes ('). # To use a different shell, other than '/bin/sh', use the exec form passing in the desired shell. For example: RUN [\"/bin/bash\", \"-c\", \"echo hello\"] ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:6:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"RUN 指令缓存 在下一次构建期间，RUN 指令的缓存不会自动失效 RUN apt-get dist-upgrade-y 这样的指令的缓存将在下一次构建期间重用 --no-cache 标志使 RUN 指令的缓存失效，docker build --no-cache ADD、COPY 可以使 RUN 指令缓存失效 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:6:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"CMD CMD [\"executable\",\"param1\",\"param2\"] (exec form, this is the preferred form) CMD [\"param1\",\"param2\"] (as default parameters to ENTRYPOINT) CMD command param1 param2 (shell form) ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:7:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"注意事项 一个 Dockerfile 只能有一个 CMD 指令，如果有多个则只有最后一个会生效。 CMD 的主要目的是为正在执行的容器提供缺省值。这些缺省值可以包括可执行文件，也可以省略可执行文件，在这种情况下，你必须指定 ENTRYPOINT 指令。 如果使用 CMD 为 ENTRYPOINT 指令提供默认参数，则应使用 JSON 数组格式指定 CMD 和 ENTRYPOINT 指令。 如果希望容器每次都运行相同的可执行文件，那么应该考虑结合使用 ENTRYPOINT 和 CMD 如果用户指定参数来运行 docker，那么它们将覆盖 CMD 中指定的缺省值 不要将 RUN 与 CMD 混淆。RUN 实际上运行一个命令并提交结果; CMD 在构建时不执行任何内容，但是为镜像指定预期的命令。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:7:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"LABEL LABEL \u003ckey\u003e=\u003cvalue\u003e \u003ckey\u003e=\u003cvalue\u003e \u003ckey\u003e=\u003cvalue\u003e ... 示例 LABEL multi.label1=\"value1\" multi.label2=\"value2\" other=\"value3\" # 等价 LABEL multi.label1=\"value1\" \\ multi.label2=\"value2\" \\ other=\"value3\" image 标签查看: docker image inspect --format='' \u003cimage_id | image_name\u003e ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:8:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"EXPOSE EXPOSE \u003cport\u003e [\u003cport\u003e/\u003cprotocol\u003e...] EXPOSE 指令通知 Docker 容器在运行时监听指定的网络端口。你可以指定端口侦听 TCP 或 UDP，如果没有指定协议，则默认为 TCP。 EXPOSE 指令实际上并不发布端口。它介于构建镜像的人和运行容器的人之间的关于发布哪些端口的文档。要在运行容器时实际发布端口，可以使用 docker run 上的 -p 标志发布和映射一个或多个端口，或使用 -P 标志发布所有公开的端口并将它们映射到高阶端口(所有端口一一映射)。 默认情况下，EXPOSE 假设为 TCP。您也可以指定 UDP: # expose udp EXPOSE 80/udp # expose both: tcp and udp EXPOSE 80/tcp EXPOSE 80/udp ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:9:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"expose for run P Publish all exposed ports to the host interfaces p=[] Publish a container’s port or a range of ports to the host docker run -p 80:80/tcp -p 80:80/udp ... docker run -p 80-81:80-81/tcp ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:9:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ENV ENV \u003ckey\u003e=\u003cvalue\u003e ... 示例 ENV MY_NAME=\"John Doe\" ENV MY_DOG=Rex\\ The\\ Dog ENV MY_CAT=fluffy multiple \u003ckey\u003e=\u003cvalue\u003e ... ENV key value 避免使用，后续可能移出，容易混淆出错 ENV MY_NAME=\"John Doe\" MY_DOG=Rex\\ The\\ Dog \\ MY_CAT=fluffy 构建阶段生效，可被覆盖 值将在构建阶段的所有后续指令的环境中，并且可以在指令行内被替换。环境变量替换将在整个指令中对每个变量使用相同的值。 ENV 设置的值将会被持久化到输出镜像中。 可以通过 docker inspect 查看 可以通过运行容器时输入参数覆盖: docker run --env \u003ckey\u003e=\u003cvalue\u003e 副作用: 你指定的环境变量可能会影响到后续镜像构建行为，请谨慎处理 可通过 RUN \u003ckey\u003e=\u003cvalue\u003e [\u003ccommand\u003e] 方式，让其只在单行指令生效 可通过 ARG 设置参数值，不会持久化到输出镜像中。 ENV abc=hello # hello ENV abc=bye def=$abc # abc=bye, def=hello; ENV ghi=$abc # ghi=bye ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:10:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ADD ADD [--chown=\u003cuser\u003e:\u003cgroup\u003e] \u003csrc\u003e... \u003cdest\u003e ADD [--chown=\u003cuser\u003e:\u003cgroup\u003e] [\"\u003csrc\u003e\",... \"\u003cdest\u003e\"] 路径含有空格必须使用此指令 说明 --chown 仅适用于 Linux 容器 /etc/passwd /etc/group 到 user, group 转换需要 指令用于复制：源支持文件、目录及远程地址 URLs 从外部复制到构建镜像中 src 支持多个源复制到指定目标地址 src 可以包含通配符，也即支持正则匹配 dest 可以是绝对路径或相对路径(相对于 WORKDIR) 示例 ADD hom* /mydir/ ADD hom?.txt /mydir/ ADD test.txt relativeDir/ ADD test.txt /absoluteDir/ ADD arr[[]0].txt /mydir/ arr[0].txt following the Golang rules 如果不指定 --chown，则默认 UID=GID=0；UID/GID 支持: username, groupname, or UID/GID 组合 ADD --chown=55:mygroup files* /somedir/ ADD --chown=bin files* /somedir/ ADD --chown=1 files* /somedir/ ADD --chown=10:11 files* /somedir/ 警告 如果使用了 username/groupname，但不存在相应的 user 或 group 则指令执行会失败 使用 IDs 将不会检查，不依赖容器根文件系统内容 docker build - \u003c somefile 没有构建上下文，ADD 只支持 URLs 形式 如果 URL 文件使用身份验证来保护，那么你需要使用 RUN wget、 RUN curl 或者使用容器内的其他工具，因为 ADD 指令不支持身份验证。 \u003csrc\u003e 路径必须在构建上下文中，docker build 指定上下文路径并发送给 docker daemon src 是 URL， dest 以 dir/ 结尾或 filename 意义不同 trailing slash，如：dir/ 创建文件到目录 dir/ no trailing slash，如：filename 创建文件名为 filename src 是 可被识别的 local tar archive (identity, gzip, bzip2 or xz) 文件将作为目录解压 如果 dest 没有以斜杠结尾，那么它将被视为一个常规文件，src 的内容将在 dest 中写入。 如果 dest 不存在，则创建该目录并在其路径中创建所有缺少的目录。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:11:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"COPY COPY [--chown=\u003cuser\u003e:\u003cgroup\u003e] \u003csrc\u003e... \u003cdest\u003e COPY [--chown=\u003cuser\u003e:\u003cgroup\u003e] [\"\u003csrc\u003e\",... \"\u003cdest\u003e\"] 路径含有空格必须使用此指令 说明 --chown 仅适用于 Linux 容器 /etc/passwd /etc/group 到 user, group 转换需要 指令用于复制：源支持文件、目录 从外部复制到构建镜像中 src 支持多个源复制到指定目标地址 src 可以包含通配符，也即支持正则匹配 与 ADD 不同，不支持 URLs dest 可以是绝对路径或相对路径(相对于 WORKDIR) 示例 ADD hom* /mydir/ ADD hom?.txt /mydir/ ADD test.txt relativeDir/ ADD test.txt /absoluteDir/ ADD arr[[]0].txt /mydir/ arr[0].txt following the Golang rules 如果不指定 --chown，则默认 UID=GID=0；UID/GID 支持: username, groupname, or UID/GID 组合 ADD --chown=55:mygroup files* /somedir/ ADD --chown=bin files* /somedir/ ADD --chown=1 files* /somedir/ ADD --chown=10:11 files* /somedir/ 警告 如果使用了 username/groupname，但不存在相应的 user 或 group 则指令执行会失败 使用 IDs 将不会检查，不依赖容器根文件系统内容 没有构建上下文，COPY 不可用 支持 COPY --from=\u003cname\u003e name 来自 FROM .. AS \u003cname\u003e 如果找不到构建名为 name 的阶段，将会尝试使用同名镜像替代 \u003csrc\u003e 路径必须在构建上下文中，docker build 指定上下文路径并发送给 docker daemon 如果 dest 没有以斜杠结尾，那么它将被视为一个常规文件，src 的内容将在 dest 中写入。 如果 dest 不存在，则创建该目录并在其路径中创建所有缺少的目录。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:12:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ENTRYPOINT ENTRYPOINT [\"executable\", \"param1\", \"param2\"] exec 形式 推荐形式 ENTRYPOINT command param1 param2 shell 形式 不能接受命令行参数，CMD 或 run 传递的 说明 ENTRYPOINT 允许你对将运行的容器进行配置 只有最后一个 ENTRYPOINT 会生效 docker run \u003cimage\u003e 的命令行参数将附加在 exec 形式的 ENTRYPOINT 后，且这些参数会覆盖定义在 CMD 中的参数。这允许通过命令行传递参数给 ENTRYPOINT。 可以通过 docker run --entrypoint 来覆盖 ENTRYPOINT exec 形式不会调用 shell 命令行，如果想使用 shell，可以在 ENTRYPOINT 中指定 sh -c：如，ENTRYPOINT [ \"sh\", \"-c\", \"echo $HOME\" ] shell 形式将作为 /bin/sh-c 的子命令启动，它不传递信号。这意味着执行程序不会是容器中 PID 1 的，也不会接收 Unix 信号，因此你的可执行文件不会接收来自 docker stop \u003ccontainer\u003e 的 SIGTERM ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:13:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"exec 形式 ENTRYPOINT 示例 Exec form ENTRYPOINT example* 示例 FROMubuntuENTRYPOINT [\"top\", \"-b\"]CMD [\"-c\"] 构建镜像 top，docker build -t top . 启动容器 docker run -it --rm --name test top -H top - 16:04:58 up 8:38, 0 users, load average: 0.25, 0.10, 0.04 Threads: 1 total, 1 running, 0 sleeping, 0 stopped, 0 zombie %Cpu(s): 33.3 us, 33.3 sy, 0.0 ni, 33.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 4180.6 total, 560.5 free, 326.4 used, 3293.7 buff/cache MiB Swap: 1024.0 total, 1024.0 free, 0.0 used. 3242.2 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 5972 3136 2712 R 0.0 0.1 0:00.03 top To examine the result further, you can use docker exec docker exec -it test ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 3.0 0.0 5972 3216 pts/0 Ss+ 16:05 0:00 top -b -H root 8 0.0 0.0 5900 2920 pts/1 Rs+ 16:05 0:00 ps aux And you can gracefully request top to shut down using docker stop test /usr/bin/time docker stop test test 0.35 real 0.14 user 0.07 sys ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:13:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"shell 形式 ENTRYPOINT 示例 Shell form ENTRYPOINT example shell 形式 exec 执行 示例 FROMubuntuENTRYPOINT exec top -b docker run -it --rm --name test top top - 16:37:19 up 9:10, 0 users, load average: 0.20, 0.08, 0.02 Tasks: 1 total, 1 running, 0 sleeping, 0 stopped, 0 zombie %Cpu(s): 20.0 us, 40.0 sy, 0.0 ni, 20.0 id, 20.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 4180.6 total, 560.9 free, 323.7 used, 3296.0 buff/cache MiB Swap: 1024.0 total, 1024.0 free, 0.0 used. 3244.9 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 5972 3236 2812 R 0.0 0.1 0:00.04 top docker exec -it test ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 1.0 0.0 5972 3200 pts/0 Ss+ 16:55 0:00 top -b root 8 0.0 0.0 5900 2924 pts/1 Rs+ 16:55 0:00 ps aux /usr/bin/time docker stop test test 0.35 real 0.15 user 0.08 sys shell 形式执行 示例 FROMubuntuENTRYPOINT top -bCMD \"param_inner\" docker run -it --rm --name test top param_outer top - 16:34:25 up 9:08, 0 users, load average: 0.06, 0.06, 0.02 Tasks: 2 total, 1 running, 1 sleeping, 0 stopped, 0 zombie %Cpu(s): 50.0 us, 50.0 sy, 0.0 ni, 0.0 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st MiB Mem : 4180.6 total, 560.9 free, 324.3 used, 3295.4 buff/cache MiB Swap: 1024.0 total, 1024.0 free, 0.0 used. 3244.4 avail Mem PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 2616 592 528 S 0.0 0.0 0:00.03 sh 8 root 20 0 5972 3188 2772 R 0.0 0.1 0:00.00 top docker stop test 不会直接退出，等待超时后退出，可通过下面命令验证 docker exec -it test ps aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.3 0.0 2616 600 pts/0 Ss+ 16:46 0:00 /bin/sh -c top root 7 0.0 0.0 5972 3128 pts/0 S+ 16:46 0:00 top -b root 24 0.0 0.0 5900 2836 pts/1 Rs+ 16:46 0:00 ps aux /usr/bin/time docker stop test test 10.33 real 0.13 user 0.07 sys ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:13:2","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"CMD 与 ENTRYPOINT 交互 都定义了容器运行时要执行的命令 Dockerfile 至少要有一个 CMD 或 ENTRYPOINT 指令 ENTRYPOINT 当使用容器作为可执行文件时 CMD 应该用作定义 ENTRYPOINT 命令或在容器中执行临时命令的默认参数的一种方式 当使用其他参数运行容器时，CMD 将被重写 CMD 与 ENTRYPOINT 联合作用规则 如果基本镜像定义了 CMD，那么设置 ENTRYPOINT 将会把 CMD 重置为空值。 No ENTRYPOINT ENTRYPOINT exec_entry p1_entry ENTRYPOINT [“exec_entry”, “p1_entry”] No CMD error, not allowed /bin/sh -c exec_entry p1_entry exec_entry p1_entry CMD [“exec_cmd”, “p1_cmd”] exec_cmd p1_cmd /bin/sh -c exec_entry p1_entry exec_entry p1_entry exec_cmd p1_cmd CMD [“p1_cmd”, “p2_cmd”] p1_cmd p2_cmd /bin/sh -c exec_entry p1_entry exec_entry p1_entry p1_cmd p2_cmd CMD exec_cmd p1_cmd /bin/sh -c exec_cmd p1_cmd /bin/sh -c exec_entry p1_entry exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:13:3","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"VOLUME VOLUME [\"/data\"] VOLUME 指令创建一个具有指定名称的挂载点，并将其标记为从本机主机或其他容器保存外部挂载的卷。这个值可以是 JSON 数组、 VOLUME [”/var/log/”] ，或具有多个参数的普通字符串，如 VOLUME/var/log 或 VOLUME/var/log/var/var/db。 更多请参考: Share Directories via Volumes 示例 FROMubuntuRUN mkdir /myvolRUN echo \"hello world\" \u003e /myvol/greetingVOLUME/myvol 将在容器内部生成一个挂载目录 /myvol root@abef26d10e25:/# ll myvol/* -rw-r--r-- 1 root root 12 Mar 18 17:21 myvol/greeting 从 Dockerfile 中更改卷: 如果任何构建步骤在声明卷之后更改了卷中的数据，那么这些更改将被丢弃。 在文件最后声明! SON 格式化: 列表被解析为 JSON 数组。必须用双引号(”)而不是单引号(’)括住单词。 主机目录在容器运行时声明: 主机目录(挂载点)本质上是依赖于主机的。这是为了保持镜像的可移植性，因为不能保证给定的主机目录在所有主机上都可用。由于这个原因，你不能从 Dockerfile 中挂载主机目录。VOLUME 指令不支持指定 host-dir 参数。在创建或运行容器时，必须指定挂载点。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:14:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"USER USER \u003cuser\u003e[:\u003cgroup\u003e] USER \u003cUID\u003e[:\u003cGID\u003e] USER 指令设置运行镜像时要使用的用户名(或 UID)和可选的用户组(或 GID) ，以及 Dockerfile 中跟随它的任何 RUN、 CMD 和 ENTRYPOINT 指令。 在为用户指定组时，用户将只具有指定的组成员身份。任何其他配置的组成员关系都将被忽略。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:15:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"WORKDIR WORKDIR /path/to/workdir 任何在 Dockerfile 中跟随它的 RUN、 CMD、 ENTRYPOINT、 COPY 和 ADD 指令设置工作目录。如果 WORKDIR 不存在，即使它不在任何后续的 Dockerfile 指令中使用，它也会被创建。 可以在 Dockerfile 中多次使用 WORKDIR 指令。如果提供了相对路径，那么它将相对于前一条 WORKDIR 指令的路径。 WORKDIR 可解析在它之前设置的环境变量 ENV WORKDIR 如果未设置，则默认为 / WORKDIR /a WORKDIR b WORKDIR c RUN pwd # output /a/b/c ENV DIRPATH=/path WORKDIR $DIRPATH/$DIRNAME RUN pwd # output /path/$DIRNAME ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:16:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ARG ARG \u003cname\u003e[=\u003cdefault value\u003e] ARG 指令定义了一个变量，用户可以在构建时使用 docker build 命令使用 --build-ARG \u003cvarname\u003e=\u003cvalue\u003e 标志将该变量传递给构建器。如果用户指定了未在 Dockerfile 中定义的构建参数，则构建将输出一个警告。 不建议使用构建时变量来传递诸如 github key、用户凭证等秘密。使用 docker history 命令，构建时变量值对于镜像的任何用户都是可见的。 FROM busybox ARG user1 ARG buildno # ... ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"默认值 FROM busybox ARG user1=someuser ARG buildno=1 # .. ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"作用域 ARG 变量在 Dockerfile 中定义的行之后的指令中生效，其他地方不生效。 docker build --build-arg \u003cname\u003e=\u003cvalue\u003e 可覆盖变量 \u003carg-name\u003e ARG 指令在定义它的构建阶段结束时失效。要在多个阶段中使用 ARG，每个阶段都必须包含 ARG 指令。 每个 FROM 都定义了一个构建阶段 FROM busybox USER ${user:-some_user} ARG user USER $user # ... # -------multi build stage 1 ----------- FROM busybox ARG SETTINGS # declare it to use next RUN ./run/setup $SETTINGS # -------multi build stage 2 ----------- FROM busybox ARG SETTINGS # declare it to use next RUN ./run/other $SETTINGS ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:2","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ARG 变量使用 ENV ARG 定义的同名变量，ARG 后定义的 ENV 值会覆盖它之前声明的最近的 ARG 值。 ARG VAR_NAME 可多次使用，每次都相当于重置，都可被其后最近的同名 ENV 覆盖 请避免 多次引入 ARG VAR_NAME 避免 ARG 与 ENV 变量同名 避免你定义的变量名与镜像系统内的一样，除非你需要这么做 FROMubuntuARG CONT_IMG_VERENV CONT_IMG_VER=v1.0.0RUN echo $CONT_IMG_VER docker build --build-arg CONT_IMG_VER=v2.0.1 . 输出 v1.0.0 更多可参考：环境变量替换 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:3","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"内置参数 docker build --build-arg HTTPS_PROXY=https://my-proxy.example.com . HTTP_PROXY http_proxy HTTPS_PROXY https_proxy FTP_PROXY ftp_proxy NO_PROXY no_proxy ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:4","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"平台相关全局参数 docker build --platform= 仅支持 BuildKit 18.09+ DOCKER_BUILDKIT=1 TARGETPLATFORM - platform of the build result. Eg linux/amd64, linux/arm/v7, windows/amd64. TARGETOS - OS component of TARGETPLATFORM TARGETARCH - architecture component of TARGETPLATFORM TARGETVARIANT - variant component of TARGETPLATFORM BUILDPLATFORM - platform of the node performing the build. BUILDOS - OS component of BUILDPLATFORM BUILDARCH - architecture component of BUILDPLATFORM BUILDVARIANT - variant component of BUILDPLATFORM ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:5","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ARG 引起的缓存失效 docker build --build-arg CONT_IMG_VER=v2.0.1 . RUN echo 123 ARG CONT_IMG_VER ENV CONT_IMG_VER=$CONT_IMG_VER RUN echo $CONT_IMG_VER RUN echo 456 RUN echo 789 exec count 1: no use cache exec count 2: use cache exec count 3, but change CONT_IMG_VER=v2.0.2，ARG CONT_IMG_VER 之前的使用了 cache, 后续输出全部缓存失效 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:17:6","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ONBUILD ONBUILD \u003cINSTRUCTION\u003e 说明 任何构建指令都可以注册为触发器，FROM、MAINTAINER、ONBUILD 除外 标准化基础镜像构建流程，下游使用者只需遵循你的触发器设置即可 示例：默认源码/文件复制到指定目录 ONBUILD ADD . /app/src 或 ONBUILD COPY . /app/src 注意此时 Dockerfile 必须在你的项目根路径下或者与你的资源文件同级 如果有不需要参与构建的文件，一定通过配置 .dockerignore 将其忽略掉 ONBUILD 指令向镜像添加一个触发器指令，以便在以后将该镜像用作另一个构建的基础时执行。触发器将在下游构建的上下文中执行，就好像它是在下游的 Dockerfile 中的 FROM 指令之后立即插入的一样。 如果你正在构建一个镜像，该镜像将用作构建其他镜像的基础，例如一个应用程序构建环境或一个守护进程，该守护进程可以使用特定于用户的配置进行自定义，那么这是非常有用的。 例如，如果你的镜像是一个可重用的 Python 应用程序构建器，则需要将应用程序源代码添加到特定的目录中，并且可能需要在此之后调用构建脚本。你现在不能只调用 ADD 和 RUN，因为你还没有访问应用程序源代码的权限，而且对于每个应用程序构建都是不同的。你可以简单地向应用程序开发人员提供一个样板文件 Dockerfile，以便将其复制粘贴到他们的应用程序中，但是这样做效率低下，容易出错，而且很难更新，因为它与应用程序特定的代码混合在。 解决方案是使用 ONBUILD 来注册预执行指令，以便稍后在下一个构建阶段运行。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:18:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"ONBUILD 的工作原理 当遇到 ONBUILD 指令时，构建器会向正在构建的镜像的元数据添加一个触发器。否则，该指令不会影响当前的生成。 在构建结束时，所有触发器的列表都存储在镜像清单中的 OnBuild 键下面。它们可以通过 docker inspect 命令进行检查。 稍后，可以使用 FROM 指令将该镜像用作新构建的基础。作为处理 FROM 指令的一部分，下游构建器查找 ONBUILD 触发器，并按照它们注册的顺序执行它们。如果任何一个触发器失败，FROM 指令就会中止，这反过来又会导致生成失败。如果所有触发器都成功了，FROM 指令就完成了，构建过程照常继续。 触发器在执行后从最终镜像中清除。换句话说，它们不会被 “子级” 构建继承。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:18:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"STOPSIGNAL STOPSIGNAL signal STOPSIGNAL 指令设置系统调用信号，该信号将被发送到容器以退出。这个信号可以是 SIG\u003cname\u003e 格式的信号名，例如 SIGKILL，或者是与内核系统调用表中的位置匹配的无符号数，例如 9。如果没有定义，则默认为 SIGTERM。 在 docker 运行和 docker create 上使用 --stop-signal 标志，可以对每个容器重写镜像的默认停止信号。 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:19:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"HEALTHCHECK HEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container) HEALTHCHECK NONE (disable any healthcheck inherited from the base image) 用于检测容器中服务运行状态：是否陷入无限循环不能处理新请求，但服务还在运行等情况。 OPTIONS 参数可选： --interval=DURATION (default: 30s) --timeout=DURATION (default: 30s) --start-period=DURATION (default: 0s) --retries=N (default: 3) The command’s exit status indicates the health status of the container. The possible values are: 0: success - the container is healthy and ready for use 1: unhealthy - the container is not working correctly 2: reserved - do not use this exit code ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:20:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"HEALTHCHECK 示例 HEALTHCHECK --interval=5m --timeout=3s \\ CMD curl -f http://localhost/ || exit 1 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:20:1","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"SHELL SHELL [\"executable\", \"parameters\"] SHELL 指令允许重写用于 SHELL 形式命令的默认 SHELL Linux 上的默认 shell 是 [\"/bin/sh\", \"-c\"] Windows 上的默认 shell 是 [\"cmd\", \"/s\", \"/c\"] SHELL 指令必须以 JSON 格式写入 Dockerfile 中 SHELL 指令在 Windows 上特别有用，在 Windows 上有两个常用的、完全不同的本机 SHELL: cmd 和 powershell，以及可选 SHELL，包括 sh SHELL 指令可以出现多次。每个 SHELL 指令覆盖以前的所有 SHELL 指令，并影响以后的所有指令 如果需要其他 SHELL，比如 zsh、 csh、 tcsh 和其他，那么也可以在 Linux 上使用 SHELL 指令 示例 FROMmicrosoft/windowsservercore# Executed as cmd /S /C echo defaultRUN echo default# Executed as cmd /S /C powershell -command Write-Host defaultRUN powershell -command Write-Host default# Executed as powershell -command Write-Host helloSHELL [\"powershell\", \"-command\"]RUN Write-Host hello# Executed as cmd /S /C echo helloSHELL [\"cmd\", \"/S\", \"/C\"]RUN echo hello ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:21:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"示例 go1.18 基础镜像构建，更多基础镜像构建可参考: docker-compose-resources FROMv8fg/golang:official-1.18-alpine3.13LABEL maintainer=\"278810732@qq.com\" github=\"https://github.com/xwi88\" group=\"https://github.com/v8fg\"# Version of upx to be used(without the 'v' prefix)# For all releases, see https://github.com/upx/upx/releasesARG UPX_VERSION=3.96# Fetch upx, decompress it, make it executable.ADD https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz /tmp/upx.tar.xyRUN apk add --no-cache tzdata git make bash \u0026\u0026 \\ tar -xJOf /tmp/upx.tar.xy upx-${UPX_VERSION}-amd64_linux/upx \u003e /bin/upx \\ \u0026\u0026 chmod +x /bin/upx \u0026\u0026 rm /tmp/upx.tar.xy ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:22:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"最佳实践 每一条指定会生成一层。对于下游镜像来说，上游镜像是只读层，当前镜像构建只是在上游只读层基础上一层层追加镜像层。 优先使用 COPY 比 ADD 更加透明直接 docker build [OPTIONS] -f PATH 如使用 stdin 输入则使用 docker build [OPTIONS] -f- PATH .dockerignore 排除不需要参与构建的文件，用法可参考 dockerignore-file 镜像体积大小优化 使用多阶段构建，减小最终构建镜像体积 对于多阶段构建文件，也可以指定需要构建的阶段，如 docker build --target builder -t xxxx . 多阶段构建，某一构建阶段可复制之前构建过程文件或者已存在镜像文件，如： COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf 不要安装非必要的软件包 只复制必要的文件到镜像中，注意配合 .dockerignore 使用 尽量做到一个容器只做一件事，避免多个服务使用一个容器 压缩可执行文件，如果可以 最小化镜像层数 只有 RUN、COPY、ADD 会创建层，合并精简相关指令到一行或多行 指令合并重排，可通过 backslash 进行多行编写，最后要清理掉产生的临时文件 如果需要进行管道处理，直接使用它，如：RUN set -o pipefail \u0026\u0026 wget -O - https://some.site | wc -l \u003e /number 构建缓存失效 ADD COPY src 引用内容变化将会使之后的 RUN 缓存失效 ARG ENV 内容变化会让后续首次使用他们定义变量的指令及其后面其他指令失效 构建缓存失效建议 尽量将其放到最后或者使用其他命令代替 尽量保持 src 或其他引用不变 PID=1 才能被 docker stop 终止，shell 形式的 sh -c PID!=1 执行 docker stop， PID=1 的容器干净的退出；stop 超时后发送 SIGKILL 来终止 CMD 与 ENTRYPOINT 联合作用规则 ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:23:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["docker"],"content":"参考 Docker reference understand-how-arg-and-from-interact Dockerfile reference dockerfile_best-practices storage driver multistage-build ","date":"2022-03-17","objectID":"/dockerfile-cheat-sheet-demo/:24:0","tags":["docker"],"title":"Dockerfile 指令小抄与构建示例","uri":"/dockerfile-cheat-sheet-demo/"},{"categories":["go"],"content":"go 程序常用 kill 信号及捕获","date":"2022-03-16","objectID":"/go-kill-signal-catch/","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"Go 程序常用 kill 信号及捕获， MacOS 下验证，基于 go1.17.7。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:0:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"常用信号 Some of the more commonly used signals: 1 HUP (hang up) 2 INT (interrupt) 3 QUIT (quit) 6 ABRT (abort) 9 KILL (non-catchable, non-ignorable kill) 14 ALRM (alarm clock) 15 TERM (software termination signal) 30 USR1 (user defined signal 1) 31 USR2 (user defined signal 2) ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:1:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"Go Code done := make(chan struct{}) ch := make(chan os.Signal, 1) signal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGABRT, syscall.SIGKILL, syscall.SIGALRM, syscall.SIGUSR1, syscall.SIGUSR2, syscall.SIGTERM, syscall.SIGINT) go func() { sgName := \u003c-ch fmt.Printf(\"receive kill signal [%v], ready to exit ...\", sgName) // resource release and other deals done \u003c- struct{}{} } \u003c-done 需要更便捷处理可以引入: signal ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:2:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"kill 测试 宿主机上执行 kill 程序停止 app 运行，按照 app 运行环境分为：宿主环境，docker 环境 ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:3:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"宿主环境 kill -\u003csignal_number | signal_name\u003e \u003cpid\u003e 技巧 linux/unix kill 默认 signal_number=15 TERM 经测试: 可正常捕获且返回 0 的 signal: 1, 2, 3, 6, 14, 15, 30, 31 HUP, INI, QUIT, ABRT, ALRM, TERM, USR1, USR2 不区分大小写 可附加前缀 SIG，同样不区分大小写 ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:3:1","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"docker 环境 docker kill -\u003csignal_number | signal_name\u003e \u003ccontainer_id\u003e 技巧 docker kill 默认 signal_number=9 KILL 经测试: 可正常捕获且返回 0 的 signal: 1, 2, 3, 6, 14, 15, 10, 12 经测试，docker kill 时 传入 10, 12 才可被识别为 USR1, USR2 原因暂时不明，不建议使用 USR1, USR2 HUP, INI, QUIT, ABRT, ALRM, TERM, USR1, USR2 不区分大小写 可附加前缀 SIG，同样不区分大小写 ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:3:2","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"结论 经过以上测试，常用可正常捕获无差异性且返回 0 的 signal: 1, 2, 3, 6, 14, 15 根据信号表示意义，我们推荐程序使用 2 SIGINT 触发: CTRL+C 或 kill -2 15 SIGTERM ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:4:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"优雅停止服务 执行 kill 发送信号 -15/-TERM/-SIGTERM 程序捕获信号后节点摘除, 释放资源，停止程序 间隔指定时间后，检测是否停止成功，未成功可根据设定策略执行 kill -9/-KILL/-SIGKILL ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:5:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"k8s 优雅停止服务 节点摘除 preStop hook 可设置延迟时间，用于处理进入流量 发送 kill 信号 -15/-TERM/-SIGTERM 程序捕获信号释放资源，停止程序 超时强制关闭处理 kill -9/-KILL/-SIGKILL 默认 30s pod: terminationGracePeriodSecond 修改 ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:6:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["go"],"content":"Docker-compose kill issue 当前 Docker Compose version 2.2.2 docker-compose 启动 CTRL+C 退出失败，强制退出: CTRL+\\ ","date":"2022-03-16","objectID":"/go-kill-signal-catch/:7:0","tags":["go","golang","signal"],"title":"Go 程序常用 kill 信号及捕获","uri":"/go-kill-signal-catch/"},{"categories":["documentation"],"content":"国内开源软件镜像站收集及常用推荐","date":"2022-03-13","objectID":"/mirrors-cn/","tags":["mirror","resources"],"title":"开源软件镜像站收集及推荐","uri":"/mirrors-cn/"},{"categories":["documentation"],"content":"国内开源软件镜像站收集，建议优先选择推荐的几个镜像站，也可直接访问国内公网开源镜像或教育网开源镜像。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-13","objectID":"/mirrors-cn/:0:0","tags":["mirror","resources"],"title":"开源软件镜像站收集及推荐","uri":"/mirrors-cn/"},{"categories":["documentation"],"content":"推荐镜像站 华为开源镜像站 腾讯开源镜像站 阿里巴巴开源镜像站 中国科学技术大学开源镜像站 清华大学开源软件镜像站 github 北京外国语大学开源软件镜像站 浙江大学开源镜像站 兰州大学开源社区镜像站 ","date":"2022-03-13","objectID":"/mirrors-cn/:1:0","tags":["mirror","resources"],"title":"开源软件镜像站收集及推荐","uri":"/mirrors-cn/"},{"categories":["documentation"],"content":"企业镜像站 华为开源镜像站 腾讯开源镜像站 阿里巴巴开源镜像站 网易开源镜像站 ","date":"2022-03-13","objectID":"/mirrors-cn/:2:0","tags":["mirror","resources"],"title":"开源软件镜像站收集及推荐","uri":"/mirrors-cn/"},{"categories":["documentation"],"content":"教育网开源镜像站 教育网镜像站们：高校及研究机构开源镜像一站式元数据平台 ","date":"2022-03-13","objectID":"/mirrors-cn/:3:0","tags":["mirror","resources"],"title":"开源软件镜像站收集及推荐","uri":"/mirrors-cn/"},{"categories":["linux"],"content":"Makefile shell 中绝对路径的正确处理","date":"2022-03-12","objectID":"/makefile-shell-path-get/","tags":["shell","linux"],"title":"Makefile shell 中绝对路径的正确处理","uri":"/makefile-shell-path-get/"},{"categories":["linux"],"content":"Makefile 与 shell(主要是 Bash) 中绝对路径的处理。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-12","objectID":"/makefile-shell-path-get/:0:0","tags":["shell","linux"],"title":"Makefile shell 中绝对路径的正确处理","uri":"/makefile-shell-path-get/"},{"categories":["linux"],"content":"Makefile make version: 3.81 BASEDIR = $(dir $(realpath $(firstword $(MAKEFILE_LIST)))) GNU Make 3.81 Copyright (C) 2006 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. This program built for i386-apple-darwin11.3.0 ","date":"2022-03-12","objectID":"/makefile-shell-path-get/:1:0","tags":["shell","linux"],"title":"Makefile shell 中绝对路径的正确处理","uri":"/makefile-shell-path-get/"},{"categories":["linux"],"content":"Linux Shell Bash version: 5.1 DIR=$(cd $(dirname $0) \u0026\u0026 pwd) DIR=$(cd $(dirname $0); pwd) DIR=$(cd dirname $0; pwd) DIR=$(cd $(dirname \"${BASH_SOURCE[0]}\") \u0026\u0026 pwd) ROOT_DIR=\"${DIR##*/}\" FILE_NAME=$(basename \"$0\") 警告 BASH_SOURCE 只适用于有 bash 环境 cat /etc/shells 本机支持 shell 查看 ","date":"2022-03-12","objectID":"/makefile-shell-path-get/:2:0","tags":["shell","linux"],"title":"Makefile shell 中绝对路径的正确处理","uri":"/makefile-shell-path-get/"},{"categories":["linux"],"content":"实例 以上使用实例请参考: docker-compose-resources Makefile docker-build.sh ","date":"2022-03-12","objectID":"/makefile-shell-path-get/:3:0","tags":["shell","linux"],"title":"Makefile shell 中绝对路径的正确处理","uri":"/makefile-shell-path-get/"},{"categories":["docker"],"content":"MacOS 上使用 minikube 替换 Docker Desktop","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Docker 公司于 2021-08-31 宣布 Docker Desktop 对大型组织来说将不再是一个免费产品。为此我们需要寻找一个可以方便替换 Docker Desktop 且对我们工作影响较小的工具，如 minikube，Hyperkit，podman。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:0:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"术语说明 Docker Inc 一家总部设在美国的公司，开发了一些开源和非开源软件，这让开发、测试和在容器中运行应用更容易。 Docker Engine Docker 背后的核心技术。它是一个作为守护进程运行在 Linux 上的开源软件，使在 Linux 内核上运行容器成为可能。它负责容器的生命周期和容器可以访问的物理资源(计算、内存、存储)的隔离。这个引擎可以在物理或者虚拟机上运行，但是它只能在 Linux 内核上运行，也就是说，在任何 Linux 风格的操作系统上。理解这一点很重要。Docker 引擎只能在 Linux 上运行。 Docker CLI CLI 通常被开发人员用来与 docker 引擎交互。这包括 docker 和 docker-compose 命令。再次强调，这是一款开源软件。 Docker Desktop 由于 Docker Engine 只能在 Linux 上运行，使用 Windows 和 macOS 进行软件开发的开发人员只有在启动运行 Linux 的虚拟机(VM)之后才能运行该引擎。这就是 Docker Desktop 的用武之地。Docker Desktop 是一个专有软件，它允许 Windows/macOS 开发者在开发环境中无缝地使用容器技术，而无需管理操作 VM 的复杂性和随之而来的所有细节(网络、虚拟化、 linux 知识等)。Docker Desktop 是为了在软件开发过程中使用而设计的，它在类似于生产环境的容器中不起作用，在这种环境中只有 Docker Engine 参与。 技巧 继续在 macOS 上运行和构建容器应用程序的方法是在 Linux VM 上运行 Docker Engine。 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:1:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"环境要求 最少 2核 最少 2GB 可用内存 最少 20GB 可用磁盘空间 网络连接 容器或虚拟机管理器, 如: Docker, Hyperkit, Hyper-V, KVM, Parallels, podman, VirtualBox, or VMware Fusion/Workstation ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:2:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"环境安装 如果确定以后不需要在 docker desktop 中运行 image，请删除所有 docker docker desktop 相关的配置。 示例 推荐 Homebrew 方式安装 brew install docker brew install docker-compose # 根据需要，可选安装 brew install hyperkit brew install minikube 技巧 如果通过 brew 安装 minikube 失败，可以尝试手动安装 curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64 sudo install minikube-darwin-amd64 /usr/local/bin/minikube ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:3:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"检查安装 执行 which minikube 警告 brew 方式安装后执行 which minikube，如果失败可执行以下命令 brew unlink minikube brew link minikube remove the old minikube links and link the newly installed binary ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:4:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Drivers 说明 minikube 在 mac/windows 下启动需要依赖 Linux VM，这里也就是我们配置的 driver，如果配置 --driver=docker 则需要安装相应版本的 Docker Desktop 借助已安装的 linux vm。 否则需要选择其他，具体支持的 drivers 参考如下： ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:5:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Linux Docker - container-based (preferred) KVM2 - VM-based (preferred) VirtualBox - VM None - bare-metal Podman - container (experimental) SSH - remote ssh ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:5:1","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"macOS Docker - VM + Container (preferred) Hyperkit - VM VirtualBox - VM Parallels - VM VMware Fusion - VM SSH - remote ssh ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:5:2","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Windows Hyper-V - VM (preferred) Docker - VM + Container (preferred) VirtualBox - VM VMware Workstation - VM SSH - remote ssh 警告 如果配置了 --driver=docker 需要区分 standard, rootless docker Standard Docker # need: install Docker 18.09 or higher # amd64 or arm64 system. # Start a cluster using the docker driver: minikube start --driver=docker # To make docker the default driver: minikube config set driver docker Rootless Docker # Requirements # Docker 20.10 or higher, see https://rootlesscontaine.rs/getting-started/docker/ # Cgroup v2 delegation, see https://rootlesscontaine.rs/getting-started/common/cgroup2/ dockerd-rootless-setuptool.sh install -f docker context use rootless minikube start --driver=docker --container-runtime=containerd The --container-runtime flag must be set to containerd or cri-o. 更多 drivers 配置及用法请查看: minikube drivers ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:5:3","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"配置命令 minikube config SUBCOMMAND [flags] [options] minikube config help minikube config defaults PROPERTY_NAME [flags] list displays all valid default settings for PROPERTY_NAME minikube config view [flags] Display values currently set in the minikube config file. minikube config set PROPERTY_NAME PROPERTY_VALUE [flags] Sets an individual value in a minikube config file minikube config get PROPERTY_NAME [flags] Returns the value of PROPERTY_NAME from the minikube config file minikube config unset PROPERTY_NAME [flags] unsets PROPERTY_NAME from the minikube config file. 技巧 minikube config --help config modifies minikube config files using subcommands like \"minikube config set driver kvm2\" Configurable fields: * driver * vm-driver * container-runtime * feature-gates * v * cpus * disk-size * host-only-cidr * memory * log_dir * kubernetes-version * iso-url * WantUpdateNotification * WantBetaUpdateNotification * ReminderWaitPeriodInHours * WantNoneDriverWarning * WantVirtualBoxDriverWarning * profile * bootstrapper * insecure-registry * hyperv-virtual-switch * disable-driver-mounts * cache * EmbedCerts * native-ssh Available Commands: defaults Lists all valid default values for PROPERTY_NAME get Gets the value of PROPERTY_NAME from the minikube config file set Sets an individual value in a minikube config file unset unsets an individual value in a minikube config file view Display values currently set in the minikube config file Usage: minikube config SUBCOMMAND [flags] [options] Use \"minikube \u003ccommand\u003e --help\" for more information about a given command. Use \"minikube options\" for a list of global command-line options (applies to all commands). 示例 minikube config set driver hyperkit minikube config set cpus 2 minikube config set memory 2000mb minikube config set disk-size 20gb # insecure-registry 测试未生效, 启动时指定! minikube config set insecure-registry https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com # minikube config set kubernetes-version \u003c\u003e # The name of the minikube VM being used. This can be set to allow having multiple instances of minikube independently. (default \"minikube\") minikube config set profile ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:6:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"快捷启动 minikube start # minikube start --container-runtime=docker # Tell Docker CLI to talk to minikube's VM eval $(minikube docker-env) # Save IP to a hostname # echo \"`minikube ip` docker.local\" | sudo tee -a /etc/hosts \u003e /dev/null # control panel, must start minikube with cluster model, without flag --no-kubernetes minikube dashboard # stop kubernetes related minikube pause # test docker run hello-world ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:7:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"高级启动 commands start ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:8:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"启动命令 某些配置更新后需要执行: minikube delete 然后重新启动 示例 minikube start --driver=hyperkit 或 minikube start --driver=docker 或其他驱动 推荐使用类似配置，后续不用进入 minikube vm 修改相关配置，主要配置： --insecure-registry --registry-mirror --mount 挂载本地主机目录到 minikube vm 当前 MacOS 下，默认将挂载 /Users:/minikube-host/ 挂载路径最好保持完全一致，避免程序有路径依赖而无法正常启动 建议使用 --mount-string 按需挂载 --mount-string 指定挂载目录 --no-kubernetes --cpus --memory --image-mirror-country minikube start --no-kubernetes --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com --mount /var/lib/minikube:/var/lib/docker 如果要使用 minikube dashboard，可这样启动: minikube start --cpus=2 --memory=2000mb \\ --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com Tell Docker CLI to talk to minikube’s VM: eval $(minikube docker-env) eval $(minikube docker-env) 可以直接配置到对应 shell 如: ~/.zshrc 或 ~/.bashrc 中，以避免每次输入 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:8:1","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"可能出现的问题 警告 如果你在 Docker Desktop 基础上启动 minikube，直接借助它的 vm 及配置。由于资源限制，可能导致无法正常启动 minikube 😄 minikube v1.24.0 on Darwin 12.2.1 ✨ Using the docker driver based on existing profile ⛔ Docker Desktop only has 1986MiB available, you may encounter application deployment failures. 💡 Suggestion: 1. Click on \"Docker for Desktop\" menu icon 2. Click \"Preferences\" 3. Click \"Resources\" 4. Increase \"Memory\" slider bar to 2.25 GB or higher 5. Click \"Apply \u0026 Restart\" 📘 Documentation: https://docs.docker.com/docker-for-mac/#resources ❗ You cannot change the memory size for an existing minikube cluster. Please first delete the cluster. 👍 Starting minikube without Kubernetes minikube in cluster minikube minikube delete 调整 docker 资源后，删除重建，重新启动即可 🔥 Deleting \"minikube\" in docker ... 🔥 Removing ~/.minikube/machines/minikube ... 💀 Removed all traces of the \"minikube\" cluster. ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:8:2","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"启动后环境检查 示例 启动命令: minikube start --no-kubernetes --insecure-registry=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com minikube v1.24.0 on Darwin 10.15.7 ▪ MINIKUBE_ACTIVE_DOCKERD=minikube ✨ Using the hyperkit driver based on user configuration 👍 Starting minikube without Kubernetes minikube in cluster minikube 🔥 Creating hyperkit VM (CPUs=2, Memory=2000MB, Disk=20480MB) ... 🏄 Done! minikube is ready without Kubernetes! ╭───────────────────────────────────────────────────────────────────────────────────────╮ │ │ │ 💡 Things to try without Kubernetes ... │ │ │ │ - \"minikube ssh\" to SSH into minikube's node. │ │ - \"minikube docker-env\" to point your docker-cli to the docker inside minikube. │ │ - \"minikube image\" to build images without docker. │ │ │ ╰───────────────────────────────────────────────────────────────────────────────────────╯ eval $(minikube docker-env) 让 Docker CLI 与 minikube’s VM 交互 技巧 Add this line to .bash_profile or .zshrc or … if you want to use minikube’s daemon by default (or if you do not want to set this every time you open a new terminal). docker info 查看我们现在终端的 docker 信息 Kernel Version: 4.19.202 Operating System: Buildroot 2021.02.4 OSType: linux Architecture: x86_64 CPUs: 2 Total Memory: 1.894GiB Name: minikube ID: STNM:GBUS:PMHK:ASTU:BZHZ:WIEY:L6F3:YOMH:M432:S5XK:PAT5:IU2D Docker Root Dir: /var/lib/docker Debug Mode: false Registry: https://index.docker.io/v1/ Labels: provider=hyperkit Experimental: false Insecure Registries: reg-mirror.qiniu.com docker.mirrors.ustc.edu.cn mirror.ccs.tencentyun.com 10.96.0.0/12 127.0.0.0/8 Live Restore Enabled: false Product License: Community Engine 新打开一个终端查看本机(未卸载 docker desktop 机器，仅做对比) docker info Kernel Version: 5.10.76-linuxkit Operating System: Docker Desktop OSType: linux Architecture: x86_64 CPUs: 3 Total Memory: 4.083GiB Name: docker-desktop HTTP Proxy: http.docker.internal:3128 HTTPS Proxy: http.docker.internal:3128 Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries: 127.0.0.0/8 Registry Mirrors: https://registry-1.docker.io/ https://hub-mirror.c.163.com/ https://mirror.baidubce.com/ https://registry.cn-hangzhou.aliyuncs.com/ https://docker.mirrors.ustc.edu.cn/ https://mirror.ccs.tencentyun.com/ https://registry.docker-cn.com/ https://reg-mirror.qiniu.com/ https://dockerhub.azk8s.cn/ ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:9:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"镜像源修改 不建议进入 minikube 环境做此修改，建议在启动时指定参数进行配置: minikube start --image-mirror-country='cn' 等参数， 详见 minikube start 或 高级启动 示例 minikube ssh 连入 minikube node sudo mkdir -p /etc/docker 创建 docker 目录 vi /etc/docker/daemon.json 修改配置 daemon.json daemon.json 配置 { \"registry-mirrors\": [ \"https://registry-1.docker.io\", \"https://hub-mirror.c.163.com\", \"https://mirror.baidubce.com\", \"https://registry.cn-hangzhou.aliyuncs.com\", \"http://f1361db2.m.daocloud.io\", \"https://docker.mirrors.ustc.edu.cn\", \"https://mirror.ccs.tencentyun.com\", \"https://registry.docker-cn.com\", \"https://reg-mirror.qiniu.com\", \"https://dockerhub.azk8s.cn\" ] } sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:10:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Dashboard minikube dashboard 示例 minikube start --driver=hyperkit --cpus=2 --memory=2000mb --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com minikube dashboard ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:11:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"目录挂载 This will start the mount daemon and automatically mount files into minikube. minikube mount \u003clocal directory\u003e:\u003chost directory\u003e 映射/挂载关系: 本地主机 volumes\u003c-\u003edocker desktop VM volumes\u003c-\u003edocker container volumes ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:12:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"Driver 默认挂载路径 Some hypervisors, have built-in host folder sharing. Driver mounts are reliable with good performance, but the paths are not predictable across operating systems or hypervisors: Driver OS HostFolder VM VirtualBox Linux /home /hosthome VirtualBox macOS /Users /Users VirtualBox Windows C://Users /c/Users VMware Fusion macOS /Users /mnt/hgfs/Users KVM Linux Unsupported HyperKit Linux Unsupported (see NFS mounts) These mounts can be disabled by passing –disable-driver-mounts to minikube start. ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:12:1","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"本机应用启动 如果你使用了目录映射，则必须开启挂载，且一定要注意挂载路径，否则会出现文件或者配置找不到问题。 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:13:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"文件或配置找不到 警告 原因： 使用 docker desktop 时，自动帮我们做了映射：本地主机 volumes\u003c-\u003edocker desktop VM volumes\u003c-\u003edocker container volumes 当我们使用 minikube 在本地运行 docker run 或 docker-compose up 实际相当于在 minikube vm 中运行，但是 minikube vm 中无本地本机的源码映射 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:13:1","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"解决方案 在本地本机进行工作目录映射/挂载: minikube mount $HOME/workspace:$HOME/workspace minikube vm 内部映射路径一定要注意: 挂载路径务必与实际路径保持一致 注意目录权限问题，正常挂载当前用户目录不涉及权限问题 可设置挂载多个目录 技巧 可将你的源码放在一个统一的工作目录，这样方便挂载及代码查找，目录结构参考如下： $HOME/workspace 源码工作空间，可整个挂载 $HOME/workspace/git.company.com 公司源码工作空间，仅公司代码 $HOME/workspace/github.com github 源码工作空间 $HOME/workspace/gitee.com ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:13:2","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"开机启动 --mount --mount-string=$HOME/workspace:$HOME/workspace 可能存在问题，推荐启动后用命令 minikube mount 挂载 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:14:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"仅挂载当前项目目录 优: 挂载目录少，占空间较小 缺: 如果切换项目需要重新挂载，太过麻烦 尽量挂载整个工作目录(注意控制规模)，切换项目不用额外操作 # --mount --mount-string=$HOME/workspace:$HOME/workspace #minikube delete minikube start --no-kubernetes --driver=hyperkit --cpus=2 --memory=2gb --disk-size=20gb \\ --image-mirror-country=cn \\ --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com eval $(minikube docker-env) minikube mount ${PWD}:${PWD} ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:14:1","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"挂载整个工作目录 # issues here {单独 --mount 将挂载: /Users:/minikube-host/; --mount-string 仅挂载指定目录，此时不需要添加 --mount， 推荐方式} # --mount --mount-string=$HOME/workspace:$HOME/workspace #minikube delete minikube start --no-kubernetes --driver=hyperkit --cpus=2 --memory=2gb --disk-size=20gb \\ --image-mirror-country=cn \\ --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com eval $(minikube docker-env) minikube mount ${HOME}/workspace:${HOME}/workspace ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:14:2","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"挂载整个工作目录且后台运行 # --mount --mount-string=$HOME/workspace:$HOME/workspace #minikube delete minikube start --no-kubernetes --driver=hyperkit --cpus=2 --memory=2gb --disk-size=40gb \\ --image-mirror-country=cn \\ --registry-mirror=https://docker.mirrors.ustc.edu.cn,https://reg-mirror.qiniu.com,https://mirror.ccs.tencentyun.com eval $(minikube docker-env) nohup minikube mount ${HOME}/workspace:${HOME}/workspace \u0026 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:14:3","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"注意事项 minikube 启动后配置 eval $(minikube docker-env) minikube 启动后挂载目录 应用启动目录挂载问题 启动时指定 --driver，如果是 docker 务必确保 docker daemon 已运行 如果启动参数 mount 设置错误，则需要 minikube mount --kill，且 minikube vm 移出相应目录 minikube delete 不用每次都运行 ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:15:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"更多 Using minikube as Docker Desktop Replacement How to interact with registries minikube-image-build containerd ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:16:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["docker"],"content":"参考 run-docker-without-docker-desktop-on-macos minikube docs ","date":"2022-03-11","objectID":"/mac-minikube-replace-docker-desktop/:17:0","tags":["docker","k8s","env"],"title":"Mac 使用 minikube 替换 Docker Desktop","uri":"/mac-minikube-replace-docker-desktop/"},{"categories":["git"],"content":"我的常用 git 命令及配置","date":"2022-03-10","objectID":"/git-common-config/","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"分享一下这些年我常用的 git [gɪt] 配置。以下内容基于当前版本 2.34.1，如出现不一致可先升级自己的版本！ 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-10","objectID":"/git-common-config/:0:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"账户基本配置 --global 表示全局配置，非全局配置需要在具体 git 项目目录下面设置 git config --global user.name [your_name] git config --global user.email [your_email] git config --global --list 全局 git 配置查看 git config --list 项目 git 配置查看 ","date":"2022-03-10","objectID":"/git-common-config/:1:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"签名提交设置 configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above git config --global user.signingkey [KeyID] git config --global commit.gpgsign true 可参考: Git 使用 GPG 对提交进行签名认证 进行设置 ","date":"2022-03-10","objectID":"/git-common-config/:1:1","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"密码存储 为了避免每次都要输入密码，我们需要让机器记住密码。MacOS 会借助 keychain Access 存储你的密码及其他凭证。 git config --global credential.helper store 设置本机永久保存你的密码或凭证 git config --global credential.helper 'cache --timeout=300' 保存密码 300s 更多内容见: gitcredentials git-credential-cache 警告 如果你开启了多因素认证，则需要使用 Personal Token 之类的代替密码输入。 github 设置路径: Settings Developer settings-\u003ePersonal access tokens-\u003eGenerate new token Personal access tokens 📢 只有生成的时候可见，注意保存 务必注意权限及过期时间设置 ","date":"2022-03-10","objectID":"/git-common-config/:2:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"密码清除 密码改变或过期后请务必清除存储的密码，否则可能造成登录失败，无权限登录等问题 git config --system --unset credential.helper git config --global credential.helper 'cache --timeout=5' 或设置一个极短的过期时间，清除缓存密码 git config --global credential.helper store 重新开启密码存储 ","date":"2022-03-10","objectID":"/git-common-config/:3:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"日志输出美化 原始的 git log 太过简陋不方便查看更具体的信息，我们需要对其进行格式化，借助 git alias 可以很方便的定义我们自己的 git log 命令，请务必不要覆盖掉 git 自带的命令。 技巧 我常用的 git log 配置如下 git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset | %C(red)%cs%Creset' --abbrev-commit\" git lg -4 * 16074ef - (HEAD -\u003e main, origin/main) update posts git-sign-tag-commit-with-gpg (2 hours ago) \u003cxwi88\u003e | 2022-03-10 * e39e092 - support l2d widget (23 hours ago) \u003cxwi88\u003e | 2022-03-10 * 11605af - close cookie tip and update posts (24 hours ago) \u003cxwi88\u003e | 2022-03-09 * 9b548b6 - update posts git sign with gpg (25 hours ago) \u003cxwi88\u003e | 2022-03-09 如果你需要查看 gpg 签名信息可以如下配置: git config --global alias.lsg \"log --color --graph --pretty=format:'%C(cyan)%G?%Creset %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset | %C(red)%cs%Creset' --abbrev-commit\" git lsg -4 * G 16074ef - (HEAD -\u003e main, origin/main) update posts git-sign-tag-commit-with-gpg (2 hours ago) \u003cxwi88\u003e | 2022-03-10 * G e39e092 - support l2d widget (23 hours ago) \u003cxwi88\u003e | 2022-03-10 * G 11605af - close cookie tip and update posts (24 hours ago) \u003cxwi88\u003e | 2022-03-09 * G 9b548b6 - update posts git sign with gpg (25 hours ago) \u003cxwi88\u003e | 2022-03-09 更详细签名信息可如下配置： git config --global alias.llsg \"log --color --graph --pretty=format:'%C(cyan)%G?%Creset %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset | %C(red)%cs%Creset [%GK trust:%GT] %C(yellow)%GS%Creset' --abbrev-commit\" git llsg -4 * G 16074ef - (HEAD -\u003e main, origin/main) update posts git-sign-tag-commit-with-gpg (2 hours ago) \u003cxwi88\u003e | 2022-03-10 [C739E6A64E102CD0 trust:ultimate] xwi88 \u003c278810732@qq.com\u003e * G e39e092 - support l2d widget (23 hours ago) \u003cxwi88\u003e | 2022-03-10 [90684042688CB9BE trust:ultimate] xwi88 \u003c278810732@qq.com\u003e * G 11605af - close cookie tip and update posts (24 hours ago) \u003cxwi88\u003e | 2022-03-09 [90684042688CB9BE trust:ultimate] xwi88 \u003c278810732@qq.com\u003e * G 9b548b6 - update posts git sign with gpg (25 hours ago) \u003cxwi88\u003e | 2022-03-09 [90684042688CB9BE trust:ultimate] xwi88 \u003c278810732@qq.com\u003e 警告 务必指定输出日志条数 务必不要配置的过于复杂，可能会导致输出较慢 如果使用 gpg 签名，务必保证你不要有太多个 gpg key ","date":"2022-03-10","objectID":"/git-common-config/:4:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"基本命令 关于命令更多细节，可通过 git \u003ccommand\u003e --help 查看 git add [\u003cpath_spec\u003e...] 添加文件到 Index git add [\u003cpath_spec\u003e...] -n 显示命令执行后结果，不真正执行 git status -s 当前分支状态查看，显示文件在工作目录与暂存区不同状态：修改，未添加 Index，暂存但未提交 git diff git diff [\u003cpath\u003e...] 比较工作目录文件和暂存区文件差异 git diff \u003ccommit\u003e...\u003ccommit\u003e [\u003cpath\u003e...] 比较 commits 之间差异 git diff --cached [\u003ccommit\u003e] [\u003cpath\u003e...] 比较暂存区和版本库差异 git commit 暂存区变动提交到本地仓库 git commit -m \u003cmessage\u003e 提交到本地仓库 git commit -S -m \u003cmessage\u003e 签名并提交到本地仓库，需要配置你的签名 GPG key git commit -a -m 添加并提交全部变动到本地仓库，跳过了 git add，一般请勿执行此操作 git commit --amend 重新提交最近的提交，用于最近提交的提交日志信息修改或变动追加，请勿连续此操作，已推送远程仓库提交请避免此操作 git reset 变更撤销，具体见 checkout 与 reset git rm 从暂存区和工作目录删除文件 git mv \u003cold\u003e \u003cnew\u003e 文件的重定向，相当于：mv old new , git add 新文件 和 git rm 旧文件 ","date":"2022-03-10","objectID":"/git-common-config/:5:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"分支操作 ","date":"2022-03-10","objectID":"/git-common-config/:6:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"远程分支地址设置 git remote -v git remote add \u003cname\u003e \u003curl\u003e 远程仓库地址配置 git remote rename \u003cold\u003e \u003cnew\u003e 远程仓库地址名修改 git remote set-url \u003cname\u003e \u003cnew_url\u003e 远程仓库地址修改 ","date":"2022-03-10","objectID":"/git-common-config/:6:1","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"代码下载 clone git clone -b branch_name --single-branch \u003curl\u003e 单分支下载 git clone \u003curl\u003e [dir] ","date":"2022-03-10","objectID":"/git-common-config/:6:2","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"代码拉取与同步 git fetch --all || git merge 仅拉取代码到本地远程分支 如 origin/main, upstream/main 等，不直接合并到相应本地分支，在需要时同步合并 git pull 拉取并合并远程分支代码到当前分支，一般情况不建议直接此操作，除非你很明确可能产生的后果 git push -u \u003crepo_name\u003e \u003cbranch_name\u003e 主要用于本地新建分支与指定远程分支间的跟踪，一般用于新分支首次推送 ","date":"2022-03-10","objectID":"/git-common-config/:6:3","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"checkout 与 reset git chekout git reset git revert cli 不常用 Git Command Scope Common use cases reset Commit Discard commits in a private branch or throw away uncommited changes reset File Unstage a file checkout Commit Switch between branches or inspect old snapshots checkout File Discard changes in the working directory revert Commit Undo commits in a public branch revert File (N/A) 信息 --soft The staged snapshot and working directory are not altered in any way. --mixed The staged snapshot is updated to match the specified commit, but the working directory is not affected. This is the default option. --hard The staged snapshot and the working directory are both updated to match the specified commit. ","date":"2022-03-10","objectID":"/git-common-config/:6:4","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"代码合并提交 多人或大规模团队协作情况下，请务必掌握并使用 git rebase 进行操作，且要保证各自分支相比 base 分支有最小的 commits 数量，便于各自 rebase 及冲突解决。 如果你提交了 PR 或 MR，reviewers 审查前，请务必保证你提交的分支相较 base 是 Fast-Forward 的，禁止在界面直接进行 Rebase git rebase 慎重操作 演示，请点击 git merge 不建议此操作 ","date":"2022-03-10","objectID":"/git-common-config/:6:5","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"分支推送与删除 git push 当前分支推送，需要与远程分支建立追踪；首次推送，请使用 git push -u \u003cname\u003e \u003cbranch\u003e git push -f 强制推送当前分支到对应远程仓库 git push -f \u003cname\u003e :\u003cremote_branch\u003e 推送空分支到远程仓库，即删除远程仓库对应分支 git branch -d 本地分支删除 ","date":"2022-03-10","objectID":"/git-common-config/:6:6","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"撤销设置项 Remove the line matching the key from config file. git config --global --unset [key] 全局配置中删除 git config --unset [key] 项目配置中删除 示例 全局配种中删除误操作创建项 git config --global --unset alias.llg ","date":"2022-03-10","objectID":"/git-common-config/:7:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"配置文件编辑 git config --global -e 全局配置文件编辑，文件位置: ~/.gitconfig git config -e 项目配置文件编辑，文件位置: .git/config ","date":"2022-03-10","objectID":"/git-common-config/:8:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"参考 git docs Git-Basics-Git-Aliases Git-Commands-Basic-Snapshotting Git 使用 GPG 对提交进行签名认证 ","date":"2022-03-10","objectID":"/git-common-config/:9:0","tags":["git","env"],"title":"Git 常用命令及配置","uri":"/git-common-config/"},{"categories":["git"],"content":"使用 gpg 对 git 的 tags 或 commits 进行签名及 gpg key 的更新、续期、过期问题处理","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"使用 GPG 或 S/MIME，可以在本地对 tag 或 commit 进行签名。这些 tag 或 commit 在 GitHub 上被标记为可信的，这样其他人就可以确信这些更改来自一个可信的来源。 版权声明：本文为博主 xwi88 的原创文章，遵循 CC BY-NC 4.0 版权协议，禁止商用，转载请注明出处，欢迎关注 https://github.com/xwi88 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:0:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"开启 vigilant 模式 开启 vigilant 警惕模式后，属于你的未签名提交将被标记为 Unverified 标记。这可以提醒你和其他人关于真实性的潜在问题。Git 提交的作者和提交者很容易被欺骗。例如，有人可以推送一个声明是你的提交，但实际上不是。 设置路径: Settings-\u003eSSH and GPG keys\u003eVigilant mode-\u003eselect Flag unsigned commits as unverified ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:1:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"GPG Command ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:2:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"man gpg gpg (GnuPG) 2.2.34 libgcrypt 1.9.4 Copyright (C) 2022 g10 Code GmbH License GNU GPL-3.0-or-later \u003chttps://gnu.org/licenses/gpl.html\u003e This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Home: ~/.gnupg Supported algorithms: Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH, CAMELLIA128, CAMELLIA192, CAMELLIA256 Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224 Compression: Uncompressed, ZIP, ZLIB, BZIP2 Syntax: gpg [options] [files] Sign, check, encrypt or decrypt Default operation depends on the input data Commands: -s, --sign make a signature --clear-sign make a clear text signature -b, --detach-sign make a detached signature -e, --encrypt encrypt data -c, --symmetric encryption only with symmetric cipher -d, --decrypt decrypt data (default) --verify verify a signature -k, --list-keys list keys --list-signatures list keys and signatures --check-signatures list and check key signatures --fingerprint list keys and fingerprints -K, --list-secret-keys list secret keys --generate-key generate a new key pair --quick-generate-key quickly generate a new key pair --quick-add-uid quickly add a new user-id --quick-revoke-uid quickly revoke a user-id --quick-set-expire quickly set a new expiration date --full-generate-key full featured key pair generation --generate-revocation generate a revocation certificate --delete-keys remove keys from the public keyring --delete-secret-keys remove keys from the secret keyring --quick-sign-key quickly sign a key --quick-lsign-key quickly sign a key locally --quick-revoke-sig quickly revoke a key signature --sign-key sign a key --lsign-key sign a key locally --edit-key sign or edit a key --change-passphrase change a passphrase --export export keys --send-keys export keys to a keyserver --receive-keys import keys from a keyserver --search-keys search for keys on a keyserver --refresh-keys update all keys from a keyserver --import import/merge keys --card-status print the card status --edit-card change data on a card --change-pin change a card's PIN --update-trustdb update the trust database --print-md print message digests --server run in server mode --tofu-policy VALUE set the TOFU policy for a key Options controlling the diagnostic output: -v, --verbose verbose -q, --quiet be somewhat more quiet --options FILE read options from FILE --log-file FILE write server mode logs to FILE Options controlling the configuration: --default-key NAME use NAME as default secret key --encrypt-to NAME encrypt to user ID NAME as well --group SPEC set up email aliases --openpgp use strict OpenPGP behavior -n, --dry-run do not make any changes -i, --interactive prompt before overwriting Options controlling the output: -a, --armor create ascii armored output -o, --output FILE write output to FILE --textmode use canonical text mode -z N set compress level to N (0 disables) Options controlling key import and export: --auto-key-locate MECHANISMS use MECHANISMS to locate keys by mail address --disable-dirmngr disable all access to the dirmngr Options to specify keys: -r, --recipient USER-ID encrypt for USER-ID -u, --local-user USER-ID use USER-ID to sign or decrypt (See the man page for a complete listing of all commands and options) Examples: -se -r Bob [file] sign and encrypt for user Bob --clear-sign [file] make a clear text signature --detach-sign [file] make a detached signature --list-keys [names] show keys --fingerprint [names] show fingerprints Please report bugs to \u003chttps://bugs.gnupg.org\u003e. ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:2:1","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"gpg shell command gpg\u003e help quit quit this menu save save and quit help show this help fpr show key fingerprint grip show the keygrip list list key and user IDs uid select user ID N key select subkey N check check signatures sign sign selected user IDs [* see below for related commands] lsign sign selected user IDs locally tsign sign selected user IDs with a trust signature nrsign sign selected user IDs with a non-revocable signature deluid delete selected user IDs delkey delete selected subkeys delsig delete signatures from the selected user IDs pref list preferences (expert) showpref list preferences (verbose) trust change the ownertrust revsig revoke signatures on the selected user IDs enable enable key disable disable key showphoto show selected photo IDs clean compact unusable user IDs and remove unusable signatures from key minimize compact unusable user IDs and remove all signatures from key * The 'sign' command may be prefixed with an 'l' for local signatures (lsign), a 't' for trust signatures (tsign), an 'nr' for non-revocable signatures (nrsign), or any combination thereof (ltsign, tnrsign, etc.). ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:2:2","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"GPG Key 生成与配置 注意 GPG does not come installed by default on macOS or Windows. To install GPG command line tools, see GnuPG’s Download page. ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"已存在 GPG keys gpg --list-secret-keys --keyid-format=long 示例 ~/.gnupg/pubring.kbx ----------------------------------- sec rsa4096/325ACD1FD3B6AA80 2022-03-07 [SC] [expires: 2024-03-06] 1F11E9A019E23C53C11C8D4C325ACD1FD3B6AA80 uid [ultimate] xwi88 \u003c278810732@qq.com\u003e the GPG key ID: 325ACD1FD3B6AA80 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:1","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"新生成 GPG key 如果当前已存在旧的 GPG key 可不必重新生成! gpg --default-new-key-algo rsa4096 --gen-key 技巧 github 支持的用于生成 gpg key 的算法 RSA ElGamal DSA ECDH ECDSA EdDSA 示例 gpg --default-new-key-algo rsa4096 --gen-key Real name: tmp_gpg Email address: 278810732@qq.com You selected this USER-ID: “tmp_gpg 278810732@qq.com” Change (N)ame, (E)mail, or (O)kay/(Q)uit? O We need to generate a lot of random bytes. It is a good idea to perform some other action (type on the keyboard, move the mouse, utilize the disks) during the prime generation; this gives the random number generator a better chance to gain enough entropy. Note that this key cannot be used for encryption. You may want to use the command “–edit-key” to generate a subkey for this purpose. pub rsa4096 2022-03-09 [SC] [expires: 2024-03-08] F09FC9FB34FA457ED2F7090AFE47519758053257 uid tmp_gpg \u003c278810732@qq.com\u003e ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:2","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"最新 GPG keys gpg --list-secret-keys --keyid-format=long ----------------------------------- sec rsa4096/325ACD1FD3B6AA80 2022-03-07 [SC] [expires: 2024-03-06] 1F11E9A019E23C53C11C8D4C325ACD1FD3B6AA80 uid [ultimate] xwi88 \u003c278810732@qq.com\u003e sec rsa4096/FE47519758053257 2022-03-09 [SC] [expires: 2024-03-08] F09FC9FB34FA457ED2F7090AFE47519758053257 uid [ultimate] tmp_gpg \u003c278810732@qq.com\u003e ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:3","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"导出 GPG key gpg --armor --export FE47519758053257 或 gpg -a -o --export FE47519758053257 -----BEGIN PGP PUBLIC KEY BLOCK----- xxxxxxxxxxxxxxx -----END PGP PUBLIC KEY BLOCK----- 导出 gpg public key 到指定位置: gpg --export --armor [uid] \u003e gpgkey.pub.asc 导出到文件 uid: keyID/name/email gpg --keyserver [keyserverAddress] --send-keys keyIDs 导出到指定 key server gpg --send-keys keyIDs 导出到默认 key server 导出到默认 key server 输出 output: gpg: sending key 90684042688CB9BE to hkps://keyserver.ubuntu.com ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:4","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"查找 GPG key keyIDs 可以为: name, keyID, email gpg --keyserver keyserverAddress --search-keys keyIDs gpg --search-keys keyIDs 默认 key server 查找 示例 gpg --search-keys xwi88 gpg: data source: https://162.213.33.8:443 (1) xwi88 \u003c278810732@qq.com\u003e 4096 bit RSA key 90684042688CB9BE, created: 2022-03-09 Keys 1-1 of 1 for \"xwi88\". Enter number(s), N)ext, or Q)uit \u003e q gpg --search-keys 90684042688CB9BE gpg: data source: https://162.213.33.8:443 (1) xwi88 \u003c278810732@qq.com\u003e 4096 bit RSA key 90684042688CB9BE, created: 2022-03-09 Keys 1-1 of 1 for \"90684042688CB9BE\". Enter number(s), N)ext, or Q)uit \u003e q gpg --search-keys 278810732@qq.com gpg: data source: https://162.213.33.8:443 (1) xwi88 \u003c278810732@qq.com\u003e 4096 bit RSA key 90684042688CB9BE, created: 2022-03-09 Keys 1-1 of 1 for \"278810732@qq.com\". Enter number(s), N)ext, or Q)uit \u003e y ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:5","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"导入 GPG key key server 导入 如果不指定地址则默认从 hkps://keyserver.ubuntu.com 导入, 地址可能会不同，此为本机输出 gpg --import [GPG public key] 文件导入 gpg --keyserver [keyserverAddress] --recv-keys keyIDs key server 导入 gpg --recv-keys keyIDs 默认 key server 导入 gpg --refresh-keys 从 key server 更新所有 keys 示例 gpg --recv-keys 90684042688CB9BE gpg: key 90684042688CB9BE: \"xwi88 \u003c278810732@qq.com\u003e\" not changed gpg: Total number processed: 1 gpg: unchanged: 1 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:6","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"私钥备份导出与导入 主要用于: 个人多机共享 警告 私钥禁止上传 key server 请通过安全的方式备份存储私钥文件 私钥文件权限: 600 公钥文件权限: 644 私钥导出 gpg -a -o test_secKey.asc --export-secret-keys keyID 示例 gpg -K 本机私钥查看 gpg -a -o test_secKey.asc --export-secret-keys 1F11E9A019E23C53C11C8D4C325ACD1FD3B6AA80 私钥导出 私钥导入 gpg --import secKeyFile 示例 gpg --import test_secKey.asc 私钥导入，与公钥导入一样操作 gpg: key 325ACD1FD3B6AA80: \"xwi88 \u003c278810732@qq.com\u003e\" not changed gpg: Total number processed: 1 gpg: unchanged: 1 gpg -K 本机私钥查看 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:7","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"秘钥回收 当重新生成秘钥对后，如果其他的秘钥对不再使用，需要立即发布秘钥回收证书，声明以前的公钥不再生效，防止被恶意使用。 gpg --output test_revoke.asc --gen-revoke keyID gpg --import test_revoke.asc 导入回收证书 gpg --send-keys keyID 发送回收证书到服务器，声明原 GPG Key 作废 示例 gpg --output test_revoke.asc --gen-revoke 325ACD1FD3B6AA80 或 gpg --output test_revoke.asc --generate-revocation 325ACD1FD3B6AA80 sec rsa4096/325ACD1FD3B6AA80 2022-03-07 xwi88 \u003c278810732@qq.com\u003e Create a revocation certificate for this key? (y/N) y Please select the reason for the revocation: 0 = No reason specified 1 = Key has been compromised 2 = Key is superseded 3 = Key is no longer used Q = Cancel (Probably you want to select 1 here) Your decision? 3 Enter an optional description; end it with an empty line: \u003e Reason for revocation: Key is no longer used (No description given) Is this okay? (y/N) y ASCII armored output forced. Revocation certificate created. Please move it to a medium which you can hide away; if Mallory gets access to this certificate he can use it to make your key unusable. It is smart to print this certificate and store it away, just in case your media become unreadable. But have some caution: The print system of your machine might store the data and make it available to others! gpg --import test_revoke.asc gpg: key 325ACD1FD3B6AA80: \"xwi88 \u003c278810732@qq.com\u003e\" revocation certificate imported gpg: Total number processed: 1 gpg: new key revocations: 1 gpg: marginals needed: 3 completes needed: 1 trust model: pgp gpg: depth: 0 valid: 3 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 3u gpg: next trustdb check due at 2024-03-06 gpg --send-keys 325ACD1FD3B6AA80 gpg --search-keys 325ACD1FD3B6AA80 gpg: data source: https://162.213.33.8:443 gpg: key \"325ACD1FD3B6AA80\" not found on keyserver gpg: keyserver search failed: Not found ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:8","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"秘钥删除 gpg --delete-secret-keys keyID 需要先删除 gpg --delete-keys keyID ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:3:9","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"重启 GPG Agent GPG会在需要时重新启动它 gpgconf --kill gpg-agent ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:4:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"Git 配置使用 GPG ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"设置 GPG key 复制你要使用的 GPG key, beginning with —–BEGIN PGP PUBLIC KEY BLOCK—– and ending with —–END PGP PUBLIC KEY BLOCK—– 粘贴到 github 相应位置: Settings-\u003eSSH and GPG keys-\u003eGPG keys，如已经存在相应 key 可忽略，不存在新建后粘贴即可! ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:1","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"配置 sign 使用的 GPG key 注意你是否需要全局配置，如果进行了全局配置，单个项目也可重新配置! local 替换 –global # global config git config --global user.signingkey 325ACD1FD3B6AA80 # configure your Git client to sign commits by default for a local repository, in Git versions 2.0.0 and above git config --global commit.gpgsign true ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:2","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"提交带签名的 commit git commit -S -m \"your commit message\" 如果你设置了默认对提交进行签名，也可以如下操作 git commit -m \"your commit message\" 警告 如果你使用的 GPG key 使用了 GPG key passphrase, 则你进行提交的时候需要输入你的 passphrase. 你可以选择存储 GPG key passphrase 来避免每次的签名 passphrase 输入: Mac users, GPG Suite 可以将你的 GPG key passphrase 存储在 Mac OS Keychain Windows users, Gpg4win Manually 配置 gpg-agent 来存储 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:3","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"sign tag # sign a tag git tag -s my_tag # verify your signed tag git tag -v my_tag ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:4","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"提交签名查看 git log usage git version 2.34.1 git log --show-signature 技巧 格式化日志查看签名，可自定义配置查看 log git log --color --graph --pretty=format:'%C(cyan)%G?%Creset %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u003c%an\u003e%Creset | [%GK trust:%GT] %C(yellow)%GS%Creset' --abbrev-commit * G fb56816 - fixed rsync dir (2 days ago) \u003cxwi88\u003e | [325ACD1FD3B6AA80 trust:ultimate] xwi88 \u003c278810732@qq.com\u003e * G 63d6ec2 - fixed rsync deploy (2 days ago) \u003cxwi88\u003e | [325ACD1FD3B6AA80 trust:ultimate] xwi88 \u003c278810732@qq.com\u003e * N 1ac5368 - workflow add remote deploy (2 days ago) \u003cxwi88\u003e | [ trust:undefined] * E 289ae51 - add domain ICP info (2 days ago) \u003cxwi88\u003e | [EEA29F407613E698 trust:] * E f0e44bd - switch comment store repo:x (2 days ago) \u003cxwi88\u003e | [EEA29F407613E698 trust:] * E fbd5778 - fixed giscus issue (3 days ago) \u003cxwi88\u003e | [EEA29F407613E698 trust:] * E 5fa8d41 - replace utterances by giscus (3 days ago) \u003cxwi88\u003e | [EEA29F407613E698 trust:] G: for a good (valid) signature B: for a bad signature U: for a good signature with unknown validity X: for a good signature that has expired Y: for a good signature made by an expired key R: for a good signature made by a revoked key E: if the signature cannot be checked (e.g. missing key) N: for no signature ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:5","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"本地签名校验问题 通过命令 git log --show-signature 查看提交签名信息时可能会出现如下信息: commit e39e0920b68648b0751b7f91fffdd07080391945 (HEAD -\u003e main, origin/main, origin/HEAD) gpg: Signature made Thu Mar 10 00:19:37 2022 CST gpg: using RSA key 7E7F28C4EFFD7721E0133ED490684042688CB9BE gpg: Can't check signature: No public key 也可通过命令 git verify-commit e39e0920b68648b0751b7f91fffdd07080391945 校验指定提交签名是否合法 出现上述现象原因是因为你当前代码不存在对应 commits 使用的 gpg public key。我们可以通过导入对应提交者 gpg public keys 的方法解决。 ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:6","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"缺失 gpg keys 导入认证 为了准确获取完整提交的签名校验信息，我们需要对缺失 public keys 进行导入。我们的实验导入源参考如下： https://github.com/\u003cusername\u003e.gpg 需要你在 github 进行 GPG keys 上传配置 hkps://keyserver.ubuntu.com 需要你进行了 keys 上传 对导入的 public key 进行认证 gpg --list-keys --keyid-format=long 找到你要认证的 key gpg --lsign-key [GPG key ID] local sign gpg --edit-key [GPG key ID] local sign 与此处理选择一个即可 示例 从 github 导入我们本地缺失的 public key gpg --keyserver https://github.com/xwi88.gpg --recv-keys 7E7F28C4EFFD7721E0133ED490684042688CB9BE 认证 key gpg --lsign-key 7E7F28C4EFFD7721E0133ED490684042688CB9BE 查看认证key状态 gpg --list-keys --keyid-format=long pub rsa4096/90684042688CB9BE 2022-03-09 [SC] [expires: 2024-03-08] 7E7F28C4EFFD7721E0133ED490684042688CB9BE uid [ full ] xwi88 \u003c278810732@qq.com\u003e 再次校验我们的提交 git verify-commit e39e0920b68648b0751b7f91fffdd07080391945 gpg: Signature made Thu Mar 10 00:19:37 2022 CST gpg: using RSA key 7E7F28C4EFFD7721E0133ED490684042688CB9BE gpg: Good signature from \"xwi88 \u003c278810732@qq.com\u003e\" [full] ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:5:7","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"Github GPG public key 导入 github public GPG key for web-flow curl https://github.com/web-flow.gpg | gpg --import import github public gpg key gpg --edit-key noreply@github.com trust quit trust and save, you choose: 4 gpg --lsign-key noreply@github.com sign selected user IDs locally ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:6:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"GPG keys 更新续期处理 gpg --edit-key [GPG key ID] 示例 sec rsa4096 2022-03-09 [SC] [expires: 2024-03-08] CE70FE5A7EB462DDA68EE86913431F2AC47C4AE0 uid [ultimate] tmp_gpg_local \u003c278810732@qq.com\u003e 此处 GPG key 为重新生成的，仅供演示使用 gpg --edit-key CE70FE5A7EB462DDA68EE86913431F2AC47C4AE0 关键输出如下 sec rsa4096/73758EF02856F877 created: 2022-03-09 expires: 2024-03-08 usage: SC trust: ultimate validity: ultimate [ultimate] (1). tmp_gpg_local \u003c278810732@qq.com\u003e 输入 expire 进行过期日期更新 gpg\u003e expire Changing expiration time for the primary key. Please specify how long the key should be valid. 0 = key does not expire \u003cn\u003e = key expires in n days \u003cn\u003ew = key expires in n weeks \u003cn\u003em = key expires in n months \u003cn\u003ey = key expires in n years Key is valid for? (0) 180d Key expires at Mon Sep 5 21:48:04 2022 CST Is this correct? (y/N) y sec rsa4096/13431F2AC47C4AE0 created: 2022-03-09 expires: 2022-09-05 usage: SC trust: ultimate validity: ultimate [ultimate] (1). tmp_gpg_local \u003c278810732@qq.com\u003e gpg\u003e trust sec rsa4096/13431F2AC47C4AE0 created: 2022-03-09 expires: 2022-09-05 usage: SC trust: ultimate validity: ultimate [ultimate] (1). tmp_gpg_local \u003c278810732@qq.com\u003e Please decide how far you trust this user to correctly verify other users' keys (by looking at passports, checking fingerprints from different sources, etc.) 1 = I don't know or won't say 2 = I do NOT trust 3 = I trust marginally 4 = I trust fully 5 = I trust ultimately m = back to the main menu Your decision? 5 Do you really want to set this key to ultimate trust? (y/N) y sec rsa4096/13431F2AC47C4AE0 created: 2022-03-09 expires: 2022-09-05 usage: SC trust: ultimate validity: ultimate [ultimate] (1). tmp_gpg_local \u003c278810732@qq.com\u003e gpg\u003e save gpg --list-secret-keys --keyid-format=long 验证过期时间是否更新 sec rsa4096/90684042688CB9BE 2022-03-09 [SC] [expires: 2024-03-08] 7E7F28C4EFFD7721E0133ED490684042688CB9BE uid [ultimate] xwi88 \u003c278810732@qq.com\u003e sec rsa4096/13431F2AC47C4AE0 2022-03-09 [SC] [expires: 2022-09-05] CE70FE5A7EB462DDA68EE86913431F2AC47C4AE0 uid [ultimate] tmp_gpg_local \u003c278810732@qq.com\u003e ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:7:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"GPG sign key 重新绑定 以下设置如无需要，请勿更新 警告 以下设置如无需要请勿更新 单项目更新可选 local 替换 –global git config --global commit.gpgSign true git config --global user.signingKey 13431F2AC47C4AE0 如有变动，请同步更新你的 git 仓库 GPG key ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:8:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"GPG keys 删除 gpg --delete-secret-key [uid] gpg --delete-secret-key [uid1] [uid2] 警告 非必要不删除，如果是因为过期则直接选择进行续期操作即可 tmp_gpg 对应的 uid 输入， 可以是以下任一个，请使用 GPG key ID: tmp_gpg 13431F2AC47C4AE0 CE70FE5A7EB462DDA68EE86913431F2AC47C4AE0 示例 gpg --delete-secret-key 13431F2AC47C4AE0 sec rsa4096/13431F2AC47C4AE0 2022-03-09 tmp_gpg_local \u003c278810732@qq.com\u003e Delete this key from the keyring? (y/N) y This is a secret key! - really delete? (y/N) y 验证删除是否成功：gpg --list-secret-keys sec rsa4096 2022-03-09 [SC] [expires: 2024-03-08] 7E7F28C4EFFD7721E0133ED490684042688CB9BE uid [ultimate] xwi88 \u003c278810732@qq.com\u003e ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:9:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["git"],"content":"参考 managing-commit-signature-verification S/MIME commit signature verification smime-signing-git-commits ","date":"2022-03-09","objectID":"/git-sign-tags-commits-with-gpg/:10:0","tags":["git","gpg"],"title":"Git 使用 GPG 对提交进行签名认证","uri":"/git-sign-tags-commits-with-gpg/"},{"categories":["go"],"content":"好用的 golang 多版本管理工具，轻松自由切换","date":"2022-03-08","objectID":"/go-vcs-gvm/","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"gvm 是一个 Linux， MacOS， Windows 下的命令行工具，类似于 nvm，anaconda 可以为你提供一个便捷的多版本 go 环境的管理和切换，强烈推荐使用。 ","date":"2022-03-08","objectID":"/go-vcs-gvm/:0:0","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"安装 ","date":"2022-03-08","objectID":"/go-vcs-gvm/:1:0","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"Mac OS X Requirements # Mac OS X Requirements xcode-select --install brew update brew install mercurial ","date":"2022-03-08","objectID":"/go-vcs-gvm/:1:1","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"安装 gvm gvm # zsh zsh \u003c \u003c(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) # bash use, choose one! # bash \u003c \u003c(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer) 安装成功，会在家目录下增加 .gvm 的隐藏目录，并且在 .bashrc 或者 .zshrc 文件最底部增加一行如下内容 [[ -s \"$HOME/.gvm/scripts/gvm\" ]] \u0026\u0026 source \"$HOME/.gvm/scripts/gvm\" # shall set GO_SOURCE_URL to speed binary install export GO_SOURCE_URL=https://github.com/golang/go 如果想同时支持多个 shell 环境，可手动复制上述内容到相应 shell 配置文件! ","date":"2022-03-08","objectID":"/go-vcs-gvm/:1:2","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"Go 环境配置 通过 gvm use \u003cversion\u003e 切换 go version, 会改变部分环境变量，如: GOMODCACHE=\"$HOME/.gvm/pkgsets/go1.17.7/global/pkg/mod\" GOPATH=\"$HOME/.gvm/pkgsets/go1.17.7/global\" gvm 与上述环境变量相关的命令有: linkthis, pkgset, pkgenv 为了降低环境变化对开发等的影响可固定GOPATH 等 # shall set GO_SOURCE_URL to speed source install # default https://go.googlesource.com/go export GO_SOURCE_URL=https://github.com/golang/go # if use gvm, shall set some go env after gvm init statements # export GO111MODULE=on export GOPATH=\"$HOME/go\" export GOBIN=\"$GOPATH/bin\" export PATH=\"$GOBIN:$PATH\" export GOPROXY=https://goproxy.cn,https://goproxy.io/,https://mirrors.aliyun.com/goproxy/,https://gocenter.io/,https://proxy.golang.org,direct ","date":"2022-03-08","objectID":"/go-vcs-gvm/:1:3","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"gvm 用法 Usage: gvm [command] Description: GVM is the Go Version Manager Commands: version - print the gvm version number get - gets the latest code (for debugging) use - select a go version to use (--default to set permanently) diff - view changes to Go root help - display this usage text implode - completely remove gvm install - install go versions uninstall - uninstall go versions cross - install go cross compilers linkthis - link this directory into GOPATH list - list installed go versions listall - list available versions alias - manage go version aliases pkgset - manage go packages sets pkgenv - edit the environment for a package set ","date":"2022-03-08","objectID":"/go-vcs-gvm/:2:0","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"gvm install Usage: gvm install [version] [options] -s, --source=SOURCE Install Go from specified source. -n, --name=NAME Override the default name for this version. -pb, --with-protobuf Install Go protocol buffers. -b, --with-build-tools Install package build tools. -B, --binary Only install from binary. --prefer-binary Attempt a binary install, falling back to source. -h, --help Display this message. ","date":"2022-03-08","objectID":"/go-vcs-gvm/:2:1","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"简单使用 gvm use - select a go version to use (–default to set permanently) gvm install go1.16.14 -B # 如果机器没有 pre installed go version gvm install go1.17.7 gvm use go1.17.7 [–default] gvm uninstall go1.17.7 gvm install go1.17.7 –source=https://xxx@github.com/xxx/go gvm install go1.17.7 -s=https://godoc.org/golang.org/dl/go1.17.7 gvm implode 卸载 gvm ","date":"2022-03-08","objectID":"/go-vcs-gvm/:2:2","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["go"],"content":"示例 # gvm list gvm gos (installed) go1.16.14 =\u003e go1.17.7 go1.18rc1 system ","date":"2022-03-08","objectID":"/go-vcs-gvm/:3:0","tags":["go","golang"],"title":"Go 版本管理工具 gvm","uri":"/go-vcs-gvm/"},{"categories":["hugo"],"content":"Hugo 评论插件 giscus 的集成与支持","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"Hugo 评论插件用了几个感觉好用的还是 utterances 与 giscus，前者功能太过单，最新的基于 github discussion 的 giscus 使用体验非常不错。本文基于个人实验验证，旨在为需要的人提供方便。 blog theme: LoveIt giscus 体验 ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:0:0","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"giscus 集成使用 giscus giscus zh-CN ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:1:0","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"介绍 由 GitHub Discussions 驱动的评论系统。让访客借助 GitHub 在你的网站上留下评论和反应吧！本项目受 utterances 强烈启发。 开源。🌏 无跟踪，无广告，永久免费。📡 🚫 无需数据库。全部数据均储存在 GitHub Discussions 中。:octocat: 支持自定义主题！🌗 支持多种语言。🌐 高度可配置。🔧 自动从 GitHub 拉取新评论与编辑。🔃 可自建服务！🤳 注意： giscus 仍处于活跃开发中。GitHub 也还在活跃地开发 Discussions 及其 API。因此，一些 giscus 的特性可能随时间损坏或改变。 ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:1:1","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"配置 要求 此仓库是公开的，否则访客将无法查看 discussion。 giscus app 已安装否则访客将无法评论和回应。 Discussions 功能已在你的仓库中启用。 配置内容 \u003cscript src=\"https://giscus.app/client.js\" data-repo=\"[在此输入仓库]\" data-repo-id=\"[在此输入仓库 ID]\" data-category=\"[在此输入分类名]\" data-category-id=\"[在此输入分类 ID]\" data-mapping=\"pathname\" data-reactions-enabled=\"1\" data-emit-metadata=\"0\" data-input-position=\"bottom\" data-theme=\"light\" data-lang=\"zh-CN\" crossorigin=\"anonymous\" async\u003e \u003c/script\u003e 你可以在嵌入的页面中使用 .giscus 和 .giscus-frame 选择器来自定义容器布局 部分参数获取 repo-id, category-id github graphql api category 一般为 Announcements, 或者根据需要选择其他的，务必保证与 category-id 一致！ mapping 根据你的需要填写，一般选择 pathname github graphql discussion querygithub-graphql-discussion-query \" github graphql discussion query 经过以上步骤，我们就可以轻松的使用此插件了，但是如果要将其嵌入到当前使用的模板中还需要做一些特殊的处理。 ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:1:2","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"主题修改支持 giscus 可以通过两种方式进行改造支持: theme.js JS 方式 需要重新编译 theme.js 具体参考项目文件 Makefile make debug comment.html 模板方式 js 方式更灵活一些。我们写了两种方式，注释掉了模板插件方式修改，对修改感兴趣的可以参考相应变更: replace utterances by giscus github replace utterances by giscus gitee giscus iframe 主题配置异步修改: isetconfigmessage ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:1:3","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"效果查看 xwi88.com blog.xiw88.com hugo giscus demohugo_giscus_demo \" hugo giscus demo ","date":"2022-03-07","objectID":"/hugo-plugin-giscus-support/:1:4","tags":["hugo-plugin","github"],"title":"Hugo Plugin Giscus Support","uri":"/hugo-plugin-giscus-support/"},{"categories":["hugo"],"content":"Hugo 网站计数及阅读量统计此插件不蒜子集成使用","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"Hugo 网站访问量、文章阅读次数统计插件 busuanzi 集成配置使用，基于个人实验验证，旨在为需要的人提供方便，效果见 我的博客 或访问 xwi88.github.io。 ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:0:0","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"busuanzi busuanzi 静态网站建站现在有很多快速的技术和平台，但静态是优点也有缺点，由于是静态的，一些动态的内容如评论、计数等等模块就需要借助外来平台，计数可采用 “不蒜子”，由 Bruce 开发的一款轻量级的网页计数器。使用非常简单：两行代码可搞定， 一行脚本，一行标签。 ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:1:0","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"统计指标 PV 即 Page View，网站浏览量 指页面的浏览次数，用以衡量网站用户访问的网页数量。用户每打开一个页面便记录 1 次 PV，多次打开同一页面累计浏览量 UV 即 Unique Visitor，独立访客数 指 1 天内访问某站点的人数，以 cookie 为依据。1 天内同一访客的多次访问只计为 1 个访客。 ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:1:1","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"不蒜子与其他统计工具的区别 不蒜子 可直接将访问次数显示在您在网页上（也可不显示） 对于已经上线一段时间的网站，不蒜子允许您初始化首次数据 需要注册登录 只提供计数，样式完全由用户控制 ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:1:2","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"简单使用 只计数不显示，只安装脚本代码，不安装标签代码。 \u003cscript async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"\u003e\u003c/script\u003e \u003cspan id=\"busuanzi_container_site_pv\"\u003e本站总访问量\u003cspan id=\"busuanzi_value_site_pv\"\u003e\u003c/span\u003e次\u003c/span\u003e \u003cspan id=\"busuanzi_container_site_uv\"\u003e本站总访客数\u003cspan id=\"busuanzi_value_site_uv\"\u003e\u003c/span\u003e人\u003c/span\u003e \u003cspan id=\"busuanzi_container_page_pv\"\u003e本文总阅读量\u003cspan id=\"busuanzi_value_page_pv\"\u003e\u003c/span\u003e次\u003c/span\u003e ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:1:3","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"Hugo 集成 如果你没有开发主题的强烈欲望，且想后续持续更新选用的主题，请采用合理的方式(模板配置等的覆盖)进行自定义修改。 修改与变动 我们将对页面进行阅读计数 PV，对整站进行 PV，UV 统计。结合当前使用的主题，需要修改的地方有： footer.html 页脚模板页 请注意: 此处分为全局 footer.html 与单页 footer.html 计数使用全局 footer.html single.html 内容页模板 busuanzi.html 新加的 busuanzi 模板 config.toml 或 config.yaml 或你指定的配置文件 需要变动的地方如图所示: hugo busuanzi support/images/screen_img/hugo_busuanzi_support.jpeg \" hugo busuanzi support 自定义配置 # xwi88 自定义配置 xwi88Cfg [params.xwi88Cfg] [params.xwi88Cfg.summary] update = true # summary 更新日期显示 [params.xwi88Cfg.page] update = true # pages 更新日期显示 [params.xwi88Cfg.busuanzi] enable = true # custom uv for the whole site site_uv = true site_uv_pre = '\u003ci class=\"fa fa-user\"\u003e\u003c/i\u003e' # 字符或提示语 site_uv_post = '' # custom pv for the whole site site_pv = true site_pv_pre = '\u003ci class=\"fa fa-eye\"\u003e\u003c/i\u003e' # site_pv_post = '\u003ci class=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e' site_pv_post = '' # custom pv span for one page only page_pv = true page_pv_pre = '\u003ci class=\"far fa-eye fa-fw\"\u003e\u003c/i\u003e' page_pv_post = '' 模板添加 busuanzi.html {{ if .params.enable }} {{ if eq .bsz_type \"footer\" }} {{/* 只有 footer 才刷新，防止页面进行多次调用，计数重复; 只要启用就计数，显示与否看具体设置 */}} \u003cscript async src=\" //busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js \"\u003e\u003c/script\u003e {{ end }} {{ if or (eq .params.site_pv true) (eq .params.site_uv true) (eq .params.page_pv true) }} {{ if eq .bsz_type \"footer\" }} \u003csection\u003e {{ if eq .params.site_pv true }} \u003cspan id=\"busuanzi_container_value_site_pv\"\u003e {{- with .params.page_pv_pre -}} {{ . | safeHTML }} {{ end }} \u003cspan id=\"busuanzi_value_site_pv\"\u003e\u003c/span\u003e \u003c/span\u003e {{ end }} {{ if and (eq .params.site_pv true) (eq .params.site_uv true) }} \u0026nbsp;|\u0026nbsp; {{ end }} {{ if eq .params.site_uv true }} \u003cspan id=\"busuanzi_container_value_site_uv\"\u003e {{- with .params.site_uv_pre -}} {{ . | safeHTML }} {{ end }} \u003cspan id=\"busuanzi_value_site_uv\"\u003e\u003c/span\u003e \u003c/span\u003e {{ end }} \u003c/section\u003e {{ end }} {{/* page pv 只在 page 显示 */}} {{ if and (eq .params.page_pv true) (eq .bsz_type \"page-reading\") }} \u003cspan id=\"busuanzi_container_value_page_pv\"\u003e {{- with .params.page_pv_pre -}} {{ . | safeHTML }} {{ end }} \u003cspan id=\"busuanzi_value_page_pv\"\u003e\u003c/span\u003e\u0026nbsp; {{- T \"views\" -}} \u003c/span\u003e {{ end }} {{ end }} {{ end }} 相应位置引入我们编写的插件: busuanzi # 全局 footer.html {{- /* busuanzi plugin */ -}} {{- partial \"plugin/busuanzi.html\" (dict \"params\" .Site.Params.xwi88Cfg.busuanzi \"bsz_type\" \"footer\") -}} # 单页面 single.html {{- /* busuanzi plugin */ -}} {{- partial \"plugin/busuanzi.html\" (dict \"params\" .Site.Params.xwi88Cfg.busuanzi \"bsz_type\" \"page-reading\") -}} 代码变更详情可参考 github.com/xwi88/xwi88.github.io.source gitee.com/xwi88/xwi88 ","date":"2022-03-05","objectID":"/hugo-plugin-busuanzi/:1:4","tags":["hugo-plugin"],"title":"Hugo 网站访问计数插件不蒜子集成","uri":"/hugo-plugin-busuanzi/"},{"categories":["hugo"],"content":"Hugo Plugin Utterances Usage","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":["hugo"],"content":"Hugo 评论插件 utterances 配置使用, 基于个人实验验证，旨在为需要的人提供方便。 blog theme: LoveIt ","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/:0:0","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":["hugo"],"content":"utteranc utteranc ","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/:1:0","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":["hugo"],"content":"introduction A lightweight comments widget built on GitHub issues. Use GitHub issues for blog comments, wiki pages and more! Open source. 🙌 No tracking, no ads, always free. 📡🚫 No lock-in. All data stored in GitHub issues. 🔓 Styled with Primer, the css toolkit that powers GitHub. 💅 Dark theme. 🌘 Lightweight. Vanilla TypeScript. No font downloads, JavaScript frameworks or polyfills for evergreen browsers. 🐦🌲 ","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/:1:1","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":["hugo"],"content":"configuration Choose the repository utterances will connect to. Make sure the repo is public, otherwise your readers will not be able to view the issues/comments. Make sure the utterances app is installed on the repo, otherwise users will not be able to post comments. If your repo is a fork, navigate to its settings tab and confirm the issues feature is turned on. config update after this config, maybe work well. ## ref https://utteranc.es/ [params.utteranc] enable = true repo = \"owner/repo\" # your repo issueTerm = \"pathname\" theme = \"github-light\" blog post ↔ issue mapping Choose the mapping between blog posts and GitHub issues. Pls visit utterances app to check and set the config. issue label Choose the label that will be assigned to issues created by Utterances. default: Comment Label names are case sensitive. The label must exist in your repo- Utterances cannot attach labels that do not exist. Emoji are supported in label names.✨💬✨ theme Choose an Utterances theme that matches your blog. ","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/:1:2","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":["hugo"],"content":"enable utterances Add the following script tag to your blog’s template. Position it where you want the comments to appear. Customize the layout using the .utterances and .utterances-frame selectors. \u003cscript src=\"https://utteranc.es/client.js\" repo=\"[ENTER REPO HERE]\" issue-term=\"pathname\" theme=\"github-light\" crossorigin=\"anonymous\" async\u003e \u003c/script\u003e ","date":"2022-03-04","objectID":"/hugo-plugin-utterances-usage/:1:3","tags":["hugo-plugin"],"title":"Hugo 插件 Utterances 用法","uri":"/hugo-plugin-utterances-usage/"},{"categories":null,"content":" Gopher，开源贡献者，后端研发。互联网教育、区块链、广告投放等行业多年从业者。 ","date":"2022-02-28","objectID":"/about/:0:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"Github 统计 ","date":"2022-02-28","objectID":"/about/:1:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"开源 docker-compose-resources 常用基础镜像封装发布 log4go go simple log pkg gp go predict with tensorflow collectd docker 内存及 cpu 信息收集 config4go 基于 viper 的配置解析工具 version 打包二进制版本信息 ","date":"2022-02-28","objectID":"/about/:2:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"基本技能 Docker Git Go Linux Python ","date":"2022-02-28","objectID":"/about/:3:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"资源 DockerHub 已发布 docker 镜像 ","date":"2022-02-28","objectID":"/about/:4:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"学习 Rust Vue ","date":"2022-02-28","objectID":"/about/:5:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":null,"content":"更多 github gitee 仅做同步使用 ","date":"2022-02-28","objectID":"/about/:6:0","tags":null,"title":"关于我","uri":"/about/"},{"categories":["git"],"content":"Git 克隆非常慢问题的解决","date":"2022-02-26","objectID":"/git-clone-slowly-solve/","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":["git"],"content":"对于经常使用 github 的人来说，当我们进行 clone, fetch, pull, push 等等操作时，如果总是出现莫名的超时或者非常慢这是很让人捉急的，会严重影响效率，为此本文给出了几种解决方案。 造成上述情况的原因是多方面的，最大的可能就是网络被限制了, 如: github.global.ssl.fastly.net。 以项目 docker-compose-resources clone 为例: git clone https://github.com/v8fg/docker-compose-resources.git ","date":"2022-02-26","objectID":"/git-clone-slowly-solve/:0:0","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":["git"],"content":"解决方案 ","date":"2022-02-26","objectID":"/git-clone-slowly-solve/:1:0","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":["git"],"content":"Github 镜像仓库 浏览器搜索获取镜像地址替换后下载 https://hub.fastgit.org (不保证可用) https://github.91chi.fun (不保证可用) 浏览器安装插件: github 加速器, 通过此插件获取加速地址后 clone 通过其他 git 存储库进行镜像 clone 浏览器直接下载 zip ","date":"2022-02-26","objectID":"/git-clone-slowly-solve/:1:1","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":["git"],"content":"代理加速 proxy 不太推荐 gh-proxy (推荐方案) FastGithub (推荐方案 ☆☆☆☆☆☆) FastGithub github 加速神器: 解决 github 打不开,用户头像无法加载,releases 无法上传下载, git-clone, git-pull, git-push 失败等问题。 功能 提供域名的纯净 IP 解析； 提供 IP 测速并选择最快的 IP； 提供域名的 tls 连接自定义配置； google 的 CDN 资源替换，解决大量国外网站无法加载 js 和 cs s的问题； 安装配置 FastGithub github-release # linux-x64 ## terminal start sudo ./fastgithub # 设置系统自动代理为http://127.0.0.1:38457，或手动代理http/https为127.0.0.1:38457 ## service start sudo ./fastgithub start // 以systemd服务安装并启动 sudo ./fastgithub stop // 以systemd服务卸载并删除 # 设置系统自动代理为http://127.0.0.1:38457，或手动代理http/https为127.0.0.1:38457 # macOS-x64 ## 1. start fastgithub ## 2. install cacert/fastgithub.cer and set trustt # 设置系统自动代理为http://127.0.0.1:38457，或手动代理http/https为127.0.0.1:38457 # 证书验证 # 若 git 操作提示 SSL certificate problem # 需要关闭 git 的证书验证：git config --global http.sslverify false 安全性及合法性说明 以下内容摘录自 FastGithub.README FastGithub为每台不同的主机生成自颁发CA证书，保存在cacert文件夹下。客户端设备需要安装和无条件信任自颁发的CA证书，请不要将证书私钥泄露给他人，以免造成损失。 《国际联网暂行规定》第六条规定：“计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。” FastGithub本地代理使用的都是“公用电信网提供的国际出入口信道”，从国外Github服务器到国内用户电脑上FastGithub程序的流量，使用的是正常流量通道，其间未对流量进行任何额外加密（仅有网页原有的TLS加密，区别于proxy的流量加密），而FastGithub获取到网页数据之后发生的整个代理过程完全在国内，不再适用国际互联网相关之规定。 ","date":"2022-02-26","objectID":"/git-clone-slowly-solve/:1:2","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":["git"],"content":"Hosts 修改 主要是借助 nslookup or dig 获取域名对应的可访问 ip, 然后在 hosts 文件中加上 ip–\u003edomain 的映射，刷新 DNS 缓存便可。 hosts 文件是 Linux 系统中一个负责 IP 地址与域名快速解析的文件,以 ASCII 格式保存在 /etc 目录下,文件名为 hosts (不同的 Linux 版本,这个配置文件也可能不同.比如 Debian 的对应文件是 /etc/hostname) hosts 文件包含了 IP 地址和主机名之间的映射,还包括主机名的别名.在没有域名服务器的情况下,系统上的所有网络程序都通过查询该文件来解析对应于某个主机名的 IP 地址,否则就需要使用 DNS 服务程序来解决.通常可以将常用的域名和 IP 地址映射加入到 hosts 文件中,实现快速方便的访问. nslookup github.global.ssl.fastly.net nslookup github.com # vi /etc/hosts xxx github.global.ssl.fastly.net xx github.com # refresh DNS cache # linux sudo /etc/init.d/networking restart # or nscd -i hosts # arch linux /etc/rc.d/nscd restart ## macos lookupd -flushcache # dscacheutil -flushcache ","date":"2022-02-26","objectID":"/git-clone-slowly-solve/:1:3","tags":["git","dev_ops"],"title":"Git 克隆非常慢问题的解决","uri":"/git-clone-slowly-solve/"},{"categories":null,"content":"常用 Github DockerHub VS Code Go Wiki Awesome Go Hugo 官方 Go Rust Vue Julia V Python 研发推荐 iterm2 Grafana ELK Pyroscope kafkatool dbeaver 学习社区 力扣 Reddit Medium 哔哩哔哩 极客时间 在线书籍📚 gitbook 书栈网 算法与数据处理 conda pandas tensorflow pytorch HugeCTR 绘图神器 Process ON diagrams 亿图 在线工具 docsmall tinypng tablesgenerator 免费图库 pexels pngimg unsplash pixabay 快捷访问 Go网址导航 awesome 其他 wps ","date":"0001-01-01","objectID":"/favorite/:0:0","tags":null,"title":"超实用收藏","uri":"/favorite/"}]